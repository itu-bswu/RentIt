// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RentIt.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;


    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {

        /// <summary>
        /// Test2UserLogin - Use 'Test2UserLoginParams' to pass parameters into this method.
        /// </summary>
        public void Test2UserLogin()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIViewprofileButton = this.UIRentItWindow.UIViewprofileButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test2UserLoginParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(19, 5));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test2UserLoginParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(35, 14));

            // Click 'View profile' button
            Mouse.Click(uIViewprofileButton, new Point(54, 4));
        }

        /// <summary>
        /// Test2AssertFullName - Use 'Test2AssertFullNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test2AssertFullName()
        {
            #region Variable Declarations
            WpfEdit uITextBoxFullNameEdit = this.UIRentItWindow.UITextBoxFullNameEdit;
            #endregion

            // Verify that 'textBoxFullName' text box's property 'Text' equals 'James Smith'
            Assert.AreEqual(this.Test2AssertFullNameExpectedValues.UITextBoxFullNameEditText, uITextBoxFullNameEdit.Text);
        }

        /// <summary>
        /// Test2CloseWindow
        /// </summary>
        public void Test2CloseWindow()
        {
            #region Variable Declarations
            WpfWindow uIRentItWindow = this.UIRentItWindow;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Restore window 'RentIt'.
            uIRentItWindow.SetProperty("State", ControlStates.Restored);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 17));
        }

        /// <summary>
        /// Test4LoginLogout - Use 'Test4LoginLogoutParams' to pass parameters into this method.
        /// </summary>
        public void Test4LoginLogout()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uILogoutButton = this.UIRentItWindow.UILogoutButton;
            WinButton uIYesButton = this.UIChangewindowWindow.UIYesWindow.UIYesButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test4LoginLogoutParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(100, 12));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test4LoginLogoutParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(49, 4));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(32, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(41, 15));
        }

        /// <summary>
        /// Test4AssertLoginScreen - Use 'Test4AssertLoginScreenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test4AssertLoginScreen()
        {
            #region Variable Declarations
            WpfText uIWelcomeText = this.UIRentItWindow.UIWelcomeText;
            #endregion

            // Verify that 'Welcome:' label's property 'DisplayText' equals 'Welcome:'
            Assert.AreEqual(this.Test4AssertLoginScreenExpectedValues.UIWelcomeTextDisplayText, uIWelcomeText.DisplayText);
        }

        /// <summary>
        /// Test4CloseWindow
        /// </summary>
        public void Test4CloseWindow()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 10));
        }

        /// <summary>
        /// Test5UserViewAllMovies - Use 'Test5UserViewAllMoviesParams' to pass parameters into this method.
        /// </summary>
        public void Test5UserViewAllMovies()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIListmoviesButton = this.UIRentItWindow.UIListmoviesButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test5UserViewAllMoviesParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(115, 14));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test5UserViewAllMoviesParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(61, 5));

            // Click 'List movies' button
            Mouse.Click(uIListmoviesButton, new Point(65, 10));
        }

        /// <summary>
        /// Test5SelectTopMovie - Use 'Test5SelectTopMovieParams' to pass parameters into this method.
        /// </summary>
        public void Test5SelectTopMovie()
        {
            #region Variable Declarations
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Select '(Ocean's Eleven\, 1)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test5SelectTopMovieParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(70, 16));
        }

        /// <summary>
        /// Test5AssertTopMovieName - Use 'Test5AssertTopMovieNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test5AssertTopMovieName()
        {
            #region Variable Declarations
            WpfEdit uITextBoxTitleEdit = this.UIRentItWindow.UITextBoxTitleEdit;
            #endregion

            // Verify that 'textBoxTitle' text box's property 'Text' equals 'Ocean's Eleven'
            Assert.AreEqual(this.Test5AssertTopMovieNameExpectedValues.UITextBoxTitleEditText, uITextBoxTitleEdit.Text);
        }

        /// <summary>
        /// Test5CloseWindow
        /// </summary>
        public void Test5CloseWindow()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 9));
        }

        /// <summary>
        /// Test6UserLoginSelectMovie - Use 'Test6UserLoginSelectMovieParams' to pass parameters into this method.
        /// </summary>
        public void Test6UserLoginSelectMovie()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfComboBox uISortModeComboBoxComboBox = this.UIRentItWindow.UISortModeComboBoxComboBox;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test6UserLoginSelectMovieParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(67, 14));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test6UserLoginSelectMovieParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(21, 14));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox.SelectedItem = this.Test6UserLoginSelectMovieParams.UISortModeComboBoxComboBoxSelectedItem;

            // Select '(Ocean's Eleven\, 1)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test6UserLoginSelectMovieParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(57, 17));
        }

        /// <summary>
        /// Test6AssertNewMovie - Use 'Test6AssertNewMovieExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test6AssertNewMovie()
        {
            #region Variable Declarations
            WpfEdit uITextBoxReleaseEdit = this.UIRentItWindow.UITextBoxReleaseEdit;
            #endregion

            // Verify that 'textBoxRelease' text box's property 'Text' equals '5. december 2001'
            Assert.AreEqual(this.Test6AssertNewMovieExpectedValues.UITextBoxReleaseEditText, uITextBoxReleaseEdit.Text);
        }

        /// <summary>
        /// Test6SelectOlderMovie - Use 'Test6SelectOlderMovieParams' to pass parameters into this method.
        /// </summary>
        public void Test6SelectOlderMovie()
        {
            #region Variable Declarations
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(39, 13));

            // Select '(The Matrix\, 5)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test6SelectOlderMovieParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(38, 8));
        }

        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfEdit uITextBoxReleaseEdit = this.UIRentItWindow.UITextBoxReleaseEdit;
            #endregion

            // Verify that 'textBoxRelease' text box's property 'Text' equals '31. marts 1999'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextBoxReleaseEditText, uITextBoxReleaseEdit.Text);
        }

        /// <summary>
        /// Test6AssertOlderMovie - Use 'Test6AssertOlderMovieExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test6AssertOlderMovie()
        {
            #region Variable Declarations
            WpfEdit uITextBoxReleaseEdit = this.UIRentItWindow.UITextBoxReleaseEdit;
            #endregion

            // Verify that 'textBoxRelease' text box's property 'Text' equals '31. marts 1999'
            Assert.AreEqual(this.Test6AssertOlderMovieExpectedValues.UITextBoxReleaseEditText, uITextBoxReleaseEdit.Text);
        }

        /// <summary>
        /// Test6CloseWindow
        /// </summary>
        public void Test6CloseWindow()
        {
            #region Variable Declarations
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(691, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(32, 8));
        }

        /// <summary>
        /// Test7SearchTheMatrix - Use 'Test7SearchTheMatrixParams' to pass parameters into this method.
        /// </summary>
        public void Test7SearchTheMatrix()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfEdit uITextBoxSearchEdit = this.UIRentItWindow.UITextBoxSearchEdit;
            WpfButton uISearchButton = this.UIRentItWindow.UISearchButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test7SearchTheMatrixParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(62, 9));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test7SearchTheMatrixParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(27, 7));

            // Type 'The Matrix' in 'textBoxSearch' text box
            uITextBoxSearchEdit.Text = this.Test7SearchTheMatrixParams.UITextBoxSearchEditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(9, 15));
        }

        /// <summary>
        /// Test7SelectTheMatrix - Use 'Test7SelectTheMatrixParams' to pass parameters into this method.
        /// </summary>
        public void Test7SelectTheMatrix()
        {
            #region Variable Declarations
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Select '(The Matrix\, 5)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test7SelectTheMatrixParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(48, 12));
        }

        /// <summary>
        /// Test7AssertTheMatrixName - Use 'Test7AssertTheMatrixNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test7AssertTheMatrixName()
        {
            #region Variable Declarations
            WpfEdit uITextBoxTitleEdit = this.UIRentItWindow.UITextBoxTitleEdit;
            #endregion

            // Verify that 'textBoxTitle' text box's property 'Text' equals 'The Matrix'
            Assert.AreEqual(this.Test7AssertTheMatrixNameExpectedValues.UITextBoxTitleEditText, uITextBoxTitleEdit.Text);
        }

        /// <summary>
        /// Test7CloseWindow
        /// </summary>
        public void Test7CloseWindow()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 20));
        }

        /// <summary>
        /// Test8SciFiGenre - Use 'Test8SciFiGenreParams' to pass parameters into this method.
        /// </summary>
        public void Test8SciFiGenre()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfComboBox uISortModeComboBoxComboBox = this.UIRentItWindow.UISortModeComboBoxComboBox;
            WpfComboBox uIGenreComboBoxComboBox = this.UIRentItWindow.UIGenreComboBoxComboBox;
            WpfButton uISortmoviesButton = this.UIRentItWindow.UISortmoviesButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test8SciFiGenreParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(76, 6));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test8SciFiGenreParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(17, 8));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox.SelectedItem = this.Test8SciFiGenreParams.UISortModeComboBoxComboBoxSelectedItem;

            // Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
            uIGenreComboBoxComboBox.SelectedItem = this.Test8SciFiGenreParams.UIGenreComboBoxComboBoxSelectedItem;

            // Click 'Sort movies' button
            Mouse.Click(uISortmoviesButton, new Point(40, 9));

            // Select '(The Matrix\, 5)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test8SciFiGenreParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(45, 14));
        }

        /// <summary>
        /// Test8AssertTheMatrixFound - Use 'Test8AssertTheMatrixFoundExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test8AssertTheMatrixFound()
        {
            #region Variable Declarations
            WpfEdit uITextBoxTitleEdit = this.UIRentItWindow.UITextBoxTitleEdit;
            #endregion

            // Verify that 'textBoxTitle' text box's property 'Text' equals 'The Matrix'
            Assert.AreEqual(this.Test8AssertTheMatrixFoundExpectedValues.UITextBoxTitleEditText, uITextBoxTitleEdit.Text);
        }

        /// <summary>
        /// Test8CloseWindow
        /// </summary>
        public void Test8CloseWindow()
        {
            #region Variable Declarations
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(702, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(21, 15));
        }

        /// <summary>
        /// Test9RentTheMatrixReloaded - Use 'Test9RentTheMatrixReloadedParams' to pass parameters into this method.
        /// </summary>
        public void Test9RentTheMatrixReloaded()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            WpfList uIEditionListBoxList = this.UIRentItWindow.UIEditionListBoxList;
            WpfButton uISelecteditionButton = this.UIRentItWindow.UISelecteditionButton;
            WpfButton uIRentmovieButton = this.UIRentItWindow.UIRentmovieButton;
            WpfButton uIYourrentalsButton = this.UIRentItWindow.UIYourrentalsButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test9RentTheMatrixReloadedParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(47, 13));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test9RentTheMatrixReloadedParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(54, 8));

            // Select '(The Matrix Reloaded\, 6)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test9RentTheMatrixReloadedParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(51, 12));

            // Select '(HD 1080p\, 18)' in 'EditionListBox' list box
            uIEditionListBoxList.SelectedItemsAsString = this.Test9RentTheMatrixReloadedParams.UIEditionListBoxListSelectedItemsAsString;

            // Click 'Select edition' button
            Mouse.Click(uISelecteditionButton, new Point(59, 13));

            // Click 'Rent movie' button
            Mouse.Click(uIRentmovieButton, new Point(59, 13));

            // Click 'Your rentals' button
            Mouse.Click(uIYourrentalsButton, new Point(67, 12));
        }

        /// <summary>
        /// Test9ViewTheMatrixReloaded - Use 'Test9ViewTheMatrixReloadedParams' to pass parameters into this method.
        /// </summary>
        public void Test9ViewTheMatrixReloaded()
        {
            #region Variable Declarations
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Select '(The Matrix Reloaded - HD 1080p\, 18\, RentItClient.Types.Movie)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test9ViewTheMatrixReloadedParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(60, 18));
        }

        /// <summary>
        /// Test9AssertTheMatrixReloadedName - Use 'Test9AssertTheMatrixReloadedNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test9AssertTheMatrixReloadedName()
        {
            #region Variable Declarations
            WpfText uITheMatrixReloadedText = this.UIRentItWindow.UITheMatrixReloadedText;
            #endregion

            // Verify that 'The Matrix Reloaded' label's property 'Name' equals 'The Matrix Reloaded'
            Assert.AreEqual(this.Test9AssertTheMatrixReloadedNameExpectedValues.UITheMatrixReloadedTextName, uITheMatrixReloadedText.Name);
        }

        /// <summary>
        /// Test9CloseWindow
        /// </summary>
        public void Test9CloseWindow()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(28, 15));
        }

        /// <summary>
        /// Test12CPLogin - Use 'Test12CPLoginParams' to pass parameters into this method.
        /// </summary>
        public void Test12CPLogin()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            #endregion

            // Type 'Universal' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test12CPLoginParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(157, 9));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test12CPLoginParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(59, 7));
        }

        /// <summary>
        /// Test12AssertLogoutButtonExists - Use 'Test12AssertLogoutButtonExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test12AssertLogoutButtonExists()
        {
            #region Variable Declarations
            WpfButton uILogoutButton1 = this.UIRentItWindow.UILogoutButton1;
            #endregion

            // Verify that 'Logout' button's property 'DisplayText' equals 'Logout'
            Assert.AreEqual(this.Test12AssertLogoutButtonExistsExpectedValues.UILogoutButton1DisplayText, uILogoutButton1.DisplayText);
        }

        /// <summary>
        /// Test12CPLogout
        /// </summary>
        public void Test12CPLogout()
        {
            #region Variable Declarations
            WpfButton uILogoutButton1 = this.UIRentItWindow.UILogoutButton1;
            WinButton uIYesButton = this.UIChangewindowWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Logout' button
            Mouse.Click(uILogoutButton1, new Point(19, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(34, 5));
        }

        /// <summary>
        /// Test12AssertWelcomeScreenShown - Use 'Test12AssertWelcomeScreenShownExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test12AssertWelcomeScreenShown()
        {
            #region Variable Declarations
            WpfText uIWelcomeText = this.UIRentItWindow.UIWelcomeText;
            #endregion

            // Verify that 'Welcome:' label's property 'DisplayText' equals 'Welcome:'
            Assert.AreEqual(this.Test12AssertWelcomeScreenShownExpectedValues.UIWelcomeTextDisplayText, uIWelcomeText.DisplayText);
        }

        /// <summary>
        /// Test12CloseWindow
        /// </summary>
        public void Test12CloseWindow()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(37, 8));
        }

        /// <summary>
        /// Test13CPRegisterMovie - Use 'Test13CPRegisterMovieParams' to pass parameters into this method.
        /// </summary>
        public void Test13CPRegisterMovie()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIRegisterMovieButton = this.UIRentItWindow.UIRegisterMovieButton;
            WpfEdit uITextBoxTitleEdit = this.UIRentItWindow.UITextBoxTitleEdit;
            WpfDatePicker uIDatePickerReleaseDatDatePicker = this.UIRentItWindow.UIDatePickerReleaseDatDatePicker;
            WpfEdit uITextBoxDescriptionEdit = this.UIRentItWindow.UITextBoxDescriptionEdit;
            WpfCheckBox uIItemCheckBox = this.UIRentItWindow.UIGenreCheckListTable.UIItemDataItem.UIItemCheckBox;
            WpfButton uIRegistermovieButton1 = this.UIRentItWindow.UIRegistermovieButton1;
            WinButton uINOButton = this.UIUploadeditionWindow.UINOWindow.UINOButton;
            #endregion

            // Type 'Universal' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test13CPRegisterMovieParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(88, 1));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test13CPRegisterMovieParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(20, 12));

            // Click 'Register Movie' button
            Mouse.Click(uIRegisterMovieButton, new Point(55, 12));

            // Type 'Detective Conan' in 'textBoxTitle' text box
            uITextBoxTitleEdit.Text = this.Test13CPRegisterMovieParams.UITextBoxTitleEditText;

            // Select '12-May-2012' in 'DatePickerReleaseDate' date picker
            uIDatePickerReleaseDatDatePicker.DateAsString = this.Test13CPRegisterMovieParams.UIDatePickerReleaseDatDatePickerDateAsString;

            // Type 'It's crime time!' in 'textBoxDescription' text box
            uITextBoxDescriptionEdit.Text = this.Test13CPRegisterMovieParams.UITextBoxDescriptionEditText;

            // Select 'Unknown Name' check box
            uIItemCheckBox.Checked = this.Test13CPRegisterMovieParams.UIItemCheckBoxChecked;

            // Click 'Register movie' button
            Mouse.Click(uIRegistermovieButton1, new Point(95, 13));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(31, 16));
        }

        /// <summary>
        /// Test13SelectDetectiveConan
        /// </summary>
        public void Test13SelectDetectiveConan()
        {
            #region Variable Declarations
            WpfListItem uIDetectiveConanRentItListItem = this.UIRentItWindow.UIMovieListBoxList.UIDetectiveConanRentItListItem;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            #endregion

            // Click '(Detective Conan, RentItClient.Types.Movie)' list item
            Mouse.Click(uIDetectiveConanRentItListItem, new Point(215, 9));

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(74, 7));
        }

        /// <summary>
        /// Test13AssertDetectiveConanName - Use 'Test13AssertDetectiveConanNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test13AssertDetectiveConanName()
        {
            #region Variable Declarations
            WpfEdit uITextBoxTitleEdit = this.UIRentItWindow.UITextBoxTitleEdit;
            #endregion

            // Verify that 'textBoxTitle' text box's property 'Text' equals 'Detective Conan'
            Assert.AreEqual(this.Test13AssertDetectiveConanNameExpectedValues.UITextBoxTitleEditText, uITextBoxTitleEdit.Text);
        }

        /// <summary>
        /// Test13DeleteDetectiveConan
        /// </summary>
        public void Test13DeleteDetectiveConan()
        {
            #region Variable Declarations
            WpfButton uIDeletemovieButton = this.UIRentItWindow.UIDeletemovieButton;
            WinButton uIYesButton = this.UIDeleteMovieWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Delete movie' button
            Mouse.Click(uIDeletemovieButton, new Point(31, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(36, 8));
        }

        /// <summary>
        /// Test13CloseWindow
        /// </summary>
        public void Test13CloseWindow()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(43, 11));
        }

        #region Properties
        public virtual Test2UserLoginParams Test2UserLoginParams
        {
            get
            {
                if ((this.mTest2UserLoginParams == null))
                {
                    this.mTest2UserLoginParams = new Test2UserLoginParams();
                }
                return this.mTest2UserLoginParams;
            }
        }

        public virtual Test2AssertFullNameExpectedValues Test2AssertFullNameExpectedValues
        {
            get
            {
                if ((this.mTest2AssertFullNameExpectedValues == null))
                {
                    this.mTest2AssertFullNameExpectedValues = new Test2AssertFullNameExpectedValues();
                }
                return this.mTest2AssertFullNameExpectedValues;
            }
        }

        public virtual Test4LoginLogoutParams Test4LoginLogoutParams
        {
            get
            {
                if ((this.mTest4LoginLogoutParams == null))
                {
                    this.mTest4LoginLogoutParams = new Test4LoginLogoutParams();
                }
                return this.mTest4LoginLogoutParams;
            }
        }

        public virtual Test4AssertLoginScreenExpectedValues Test4AssertLoginScreenExpectedValues
        {
            get
            {
                if ((this.mTest4AssertLoginScreenExpectedValues == null))
                {
                    this.mTest4AssertLoginScreenExpectedValues = new Test4AssertLoginScreenExpectedValues();
                }
                return this.mTest4AssertLoginScreenExpectedValues;
            }
        }

        public virtual Test5UserViewAllMoviesParams Test5UserViewAllMoviesParams
        {
            get
            {
                if ((this.mTest5UserViewAllMoviesParams == null))
                {
                    this.mTest5UserViewAllMoviesParams = new Test5UserViewAllMoviesParams();
                }
                return this.mTest5UserViewAllMoviesParams;
            }
        }

        public virtual Test5SelectTopMovieParams Test5SelectTopMovieParams
        {
            get
            {
                if ((this.mTest5SelectTopMovieParams == null))
                {
                    this.mTest5SelectTopMovieParams = new Test5SelectTopMovieParams();
                }
                return this.mTest5SelectTopMovieParams;
            }
        }

        public virtual Test5AssertTopMovieNameExpectedValues Test5AssertTopMovieNameExpectedValues
        {
            get
            {
                if ((this.mTest5AssertTopMovieNameExpectedValues == null))
                {
                    this.mTest5AssertTopMovieNameExpectedValues = new Test5AssertTopMovieNameExpectedValues();
                }
                return this.mTest5AssertTopMovieNameExpectedValues;
            }
        }

        public virtual Test6UserLoginSelectMovieParams Test6UserLoginSelectMovieParams
        {
            get
            {
                if ((this.mTest6UserLoginSelectMovieParams == null))
                {
                    this.mTest6UserLoginSelectMovieParams = new Test6UserLoginSelectMovieParams();
                }
                return this.mTest6UserLoginSelectMovieParams;
            }
        }

        public virtual Test6AssertNewMovieExpectedValues Test6AssertNewMovieExpectedValues
        {
            get
            {
                if ((this.mTest6AssertNewMovieExpectedValues == null))
                {
                    this.mTest6AssertNewMovieExpectedValues = new Test6AssertNewMovieExpectedValues();
                }
                return this.mTest6AssertNewMovieExpectedValues;
            }
        }

        public virtual Test6SelectOlderMovieParams Test6SelectOlderMovieParams
        {
            get
            {
                if ((this.mTest6SelectOlderMovieParams == null))
                {
                    this.mTest6SelectOlderMovieParams = new Test6SelectOlderMovieParams();
                }
                return this.mTest6SelectOlderMovieParams;
            }
        }

        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }

        public virtual Test6AssertOlderMovieExpectedValues Test6AssertOlderMovieExpectedValues
        {
            get
            {
                if ((this.mTest6AssertOlderMovieExpectedValues == null))
                {
                    this.mTest6AssertOlderMovieExpectedValues = new Test6AssertOlderMovieExpectedValues();
                }
                return this.mTest6AssertOlderMovieExpectedValues;
            }
        }

        public virtual Test7SearchTheMatrixParams Test7SearchTheMatrixParams
        {
            get
            {
                if ((this.mTest7SearchTheMatrixParams == null))
                {
                    this.mTest7SearchTheMatrixParams = new Test7SearchTheMatrixParams();
                }
                return this.mTest7SearchTheMatrixParams;
            }
        }

        public virtual Test7SelectTheMatrixParams Test7SelectTheMatrixParams
        {
            get
            {
                if ((this.mTest7SelectTheMatrixParams == null))
                {
                    this.mTest7SelectTheMatrixParams = new Test7SelectTheMatrixParams();
                }
                return this.mTest7SelectTheMatrixParams;
            }
        }

        public virtual Test7AssertTheMatrixNameExpectedValues Test7AssertTheMatrixNameExpectedValues
        {
            get
            {
                if ((this.mTest7AssertTheMatrixNameExpectedValues == null))
                {
                    this.mTest7AssertTheMatrixNameExpectedValues = new Test7AssertTheMatrixNameExpectedValues();
                }
                return this.mTest7AssertTheMatrixNameExpectedValues;
            }
        }

        public virtual Test8SciFiGenreParams Test8SciFiGenreParams
        {
            get
            {
                if ((this.mTest8SciFiGenreParams == null))
                {
                    this.mTest8SciFiGenreParams = new Test8SciFiGenreParams();
                }
                return this.mTest8SciFiGenreParams;
            }
        }

        public virtual Test8AssertTheMatrixFoundExpectedValues Test8AssertTheMatrixFoundExpectedValues
        {
            get
            {
                if ((this.mTest8AssertTheMatrixFoundExpectedValues == null))
                {
                    this.mTest8AssertTheMatrixFoundExpectedValues = new Test8AssertTheMatrixFoundExpectedValues();
                }
                return this.mTest8AssertTheMatrixFoundExpectedValues;
            }
        }

        public virtual Test9RentTheMatrixReloadedParams Test9RentTheMatrixReloadedParams
        {
            get
            {
                if ((this.mTest9RentTheMatrixReloadedParams == null))
                {
                    this.mTest9RentTheMatrixReloadedParams = new Test9RentTheMatrixReloadedParams();
                }
                return this.mTest9RentTheMatrixReloadedParams;
            }
        }

        public virtual Test9ViewTheMatrixReloadedParams Test9ViewTheMatrixReloadedParams
        {
            get
            {
                if ((this.mTest9ViewTheMatrixReloadedParams == null))
                {
                    this.mTest9ViewTheMatrixReloadedParams = new Test9ViewTheMatrixReloadedParams();
                }
                return this.mTest9ViewTheMatrixReloadedParams;
            }
        }

        public virtual Test9AssertTheMatrixReloadedNameExpectedValues Test9AssertTheMatrixReloadedNameExpectedValues
        {
            get
            {
                if ((this.mTest9AssertTheMatrixReloadedNameExpectedValues == null))
                {
                    this.mTest9AssertTheMatrixReloadedNameExpectedValues = new Test9AssertTheMatrixReloadedNameExpectedValues();
                }
                return this.mTest9AssertTheMatrixReloadedNameExpectedValues;
            }
        }

        public virtual Test12CPLoginParams Test12CPLoginParams
        {
            get
            {
                if ((this.mTest12CPLoginParams == null))
                {
                    this.mTest12CPLoginParams = new Test12CPLoginParams();
                }
                return this.mTest12CPLoginParams;
            }
        }

        public virtual Test12AssertLogoutButtonExistsExpectedValues Test12AssertLogoutButtonExistsExpectedValues
        {
            get
            {
                if ((this.mTest12AssertLogoutButtonExistsExpectedValues == null))
                {
                    this.mTest12AssertLogoutButtonExistsExpectedValues = new Test12AssertLogoutButtonExistsExpectedValues();
                }
                return this.mTest12AssertLogoutButtonExistsExpectedValues;
            }
        }

        public virtual Test12AssertWelcomeScreenShownExpectedValues Test12AssertWelcomeScreenShownExpectedValues
        {
            get
            {
                if ((this.mTest12AssertWelcomeScreenShownExpectedValues == null))
                {
                    this.mTest12AssertWelcomeScreenShownExpectedValues = new Test12AssertWelcomeScreenShownExpectedValues();
                }
                return this.mTest12AssertWelcomeScreenShownExpectedValues;
            }
        }

        public virtual Test13CPRegisterMovieParams Test13CPRegisterMovieParams
        {
            get
            {
                if ((this.mTest13CPRegisterMovieParams == null))
                {
                    this.mTest13CPRegisterMovieParams = new Test13CPRegisterMovieParams();
                }
                return this.mTest13CPRegisterMovieParams;
            }
        }

        public virtual Test13AssertDetectiveConanNameExpectedValues Test13AssertDetectiveConanNameExpectedValues
        {
            get
            {
                if ((this.mTest13AssertDetectiveConanNameExpectedValues == null))
                {
                    this.mTest13AssertDetectiveConanNameExpectedValues = new Test13AssertDetectiveConanNameExpectedValues();
                }
                return this.mTest13AssertDetectiveConanNameExpectedValues;
            }
        }

        public UIRentItWindow UIRentItWindow
        {
            get
            {
                if ((this.mUIRentItWindow == null))
                {
                    this.mUIRentItWindow = new UIRentItWindow();
                }
                return this.mUIRentItWindow;
            }
        }

        public UICloseapplicationWindow UICloseapplicationWindow
        {
            get
            {
                if ((this.mUICloseapplicationWindow == null))
                {
                    this.mUICloseapplicationWindow = new UICloseapplicationWindow();
                }
                return this.mUICloseapplicationWindow;
            }
        }

        public UIChangewindowWindow UIChangewindowWindow
        {
            get
            {
                if ((this.mUIChangewindowWindow == null))
                {
                    this.mUIChangewindowWindow = new UIChangewindowWindow();
                }
                return this.mUIChangewindowWindow;
            }
        }

        public UIRentItWindow1 UIRentItWindow1
        {
            get
            {
                if ((this.mUIRentItWindow1 == null))
                {
                    this.mUIRentItWindow1 = new UIRentItWindow1();
                }
                return this.mUIRentItWindow1;
            }
        }

        public UIUploadeditionWindow UIUploadeditionWindow
        {
            get
            {
                if ((this.mUIUploadeditionWindow == null))
                {
                    this.mUIUploadeditionWindow = new UIUploadeditionWindow();
                }
                return this.mUIUploadeditionWindow;
            }
        }

        public UIDeleteMovieWindow UIDeleteMovieWindow
        {
            get
            {
                if ((this.mUIDeleteMovieWindow == null))
                {
                    this.mUIDeleteMovieWindow = new UIDeleteMovieWindow();
                }
                return this.mUIDeleteMovieWindow;
            }
        }
        #endregion

        #region Fields
        private Test2UserLoginParams mTest2UserLoginParams;

        private Test2AssertFullNameExpectedValues mTest2AssertFullNameExpectedValues;

        private Test4LoginLogoutParams mTest4LoginLogoutParams;

        private Test4AssertLoginScreenExpectedValues mTest4AssertLoginScreenExpectedValues;

        private Test5UserViewAllMoviesParams mTest5UserViewAllMoviesParams;

        private Test5SelectTopMovieParams mTest5SelectTopMovieParams;

        private Test5AssertTopMovieNameExpectedValues mTest5AssertTopMovieNameExpectedValues;

        private Test6UserLoginSelectMovieParams mTest6UserLoginSelectMovieParams;

        private Test6AssertNewMovieExpectedValues mTest6AssertNewMovieExpectedValues;

        private Test6SelectOlderMovieParams mTest6SelectOlderMovieParams;

        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;

        private Test6AssertOlderMovieExpectedValues mTest6AssertOlderMovieExpectedValues;

        private Test7SearchTheMatrixParams mTest7SearchTheMatrixParams;

        private Test7SelectTheMatrixParams mTest7SelectTheMatrixParams;

        private Test7AssertTheMatrixNameExpectedValues mTest7AssertTheMatrixNameExpectedValues;

        private Test8SciFiGenreParams mTest8SciFiGenreParams;

        private Test8AssertTheMatrixFoundExpectedValues mTest8AssertTheMatrixFoundExpectedValues;

        private Test9RentTheMatrixReloadedParams mTest9RentTheMatrixReloadedParams;

        private Test9ViewTheMatrixReloadedParams mTest9ViewTheMatrixReloadedParams;

        private Test9AssertTheMatrixReloadedNameExpectedValues mTest9AssertTheMatrixReloadedNameExpectedValues;

        private Test12CPLoginParams mTest12CPLoginParams;

        private Test12AssertLogoutButtonExistsExpectedValues mTest12AssertLogoutButtonExistsExpectedValues;

        private Test12AssertWelcomeScreenShownExpectedValues mTest12AssertWelcomeScreenShownExpectedValues;

        private Test13CPRegisterMovieParams mTest13CPRegisterMovieParams;

        private Test13AssertDetectiveConanNameExpectedValues mTest13AssertDetectiveConanNameExpectedValues;

        private UIRentItWindow mUIRentItWindow;

        private UICloseapplicationWindow mUICloseapplicationWindow;

        private UIChangewindowWindow mUIChangewindowWindow;

        private UIRentItWindow1 mUIRentItWindow1;

        private UIUploadeditionWindow mUIUploadeditionWindow;

        private UIDeleteMovieWindow mUIDeleteMovieWindow;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test2UserLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test2UserLoginParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test2AssertFullName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test2AssertFullNameExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxFullName' text box's property 'Text' equals 'James Smith'
        /// </summary>
        public string UITextBoxFullNameEditText = "James Smith";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test4LoginLogout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test4LoginLogoutParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test4AssertLoginScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test4AssertLoginScreenExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'Welcome:' label's property 'DisplayText' equals 'Welcome:'
        /// </summary>
        public string UIWelcomeTextDisplayText = "Welcome:";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test5UserViewAllMovies'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test5UserViewAllMoviesParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test5SelectTopMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test5SelectTopMovieParams
    {

        #region Fields
        /// <summary>
        /// Select '(Ocean's Eleven\, 1)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(Ocean\'s Eleven\\, 1)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test5AssertTopMovieName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test5AssertTopMovieNameExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxTitle' text box's property 'Text' equals 'Ocean's Eleven'
        /// </summary>
        public string UITextBoxTitleEditText = "Ocean\'s Eleven";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test6UserLoginSelectMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test6UserLoginSelectMovieParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBoxSelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(Ocean's Eleven\, 1)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(Ocean\'s Eleven\\, 1)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test6AssertNewMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test6AssertNewMovieExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxRelease' text box's property 'Text' equals '5. december 2001'
        /// </summary>
        public string UITextBoxReleaseEditText = "5. december 2001";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test6SelectOlderMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test6SelectOlderMovieParams
    {

        #region Fields
        /// <summary>
        /// Select '(The Matrix\, 5)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix\\, 5)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxRelease' text box's property 'Text' equals '31. marts 1999'
        /// </summary>
        public string UITextBoxReleaseEditText = "31. marts 1999";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test6AssertOlderMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test6AssertOlderMovieExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxRelease' text box's property 'Text' equals '31. marts 1999'
        /// </summary>
        public string UITextBoxReleaseEditText = "31. marts 1999";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test7SearchTheMatrix'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test7SearchTheMatrixParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Type 'The Matrix' in 'textBoxSearch' text box
        /// </summary>
        public string UITextBoxSearchEditText = "The Matrix";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test7SelectTheMatrix'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test7SelectTheMatrixParams
    {

        #region Fields
        /// <summary>
        /// Select '(The Matrix\, 5)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix\\, 5)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test7AssertTheMatrixName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test7AssertTheMatrixNameExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxTitle' text box's property 'Text' equals 'The Matrix'
        /// </summary>
        public string UITextBoxTitleEditText = "The Matrix";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test8SciFiGenre'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test8SciFiGenreParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBoxSelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
        /// </summary>
        public string UIGenreComboBoxComboBoxSelectedItem = "(Sci-Fi, 9)";

        /// <summary>
        /// Select '(The Matrix\, 5)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix\\, 5)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test8AssertTheMatrixFound'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test8AssertTheMatrixFoundExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxTitle' text box's property 'Text' equals 'The Matrix'
        /// </summary>
        public string UITextBoxTitleEditText = "The Matrix";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test9RentTheMatrixReloaded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test9RentTheMatrixReloadedParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(The Matrix Reloaded\, 6)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix Reloaded\\, 6)";

        /// <summary>
        /// Select '(HD 1080p\, 18)' in 'EditionListBox' list box
        /// </summary>
        public string UIEditionListBoxListSelectedItemsAsString = "(HD 1080p\\, 18)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test9ViewTheMatrixReloaded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test9ViewTheMatrixReloadedParams
    {

        #region Fields
        /// <summary>
        /// Select '(The Matrix Reloaded - HD 1080p\, 18\, RentItClient.Types.Movie)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix Reloaded - HD 1080p\\, 18\\, RentItClient.Types.Movie)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test9AssertTheMatrixReloadedName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test9AssertTheMatrixReloadedNameExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'The Matrix Reloaded' label's property 'Name' equals 'The Matrix Reloaded'
        /// </summary>
        public string UITheMatrixReloadedTextName = "The Matrix Reloaded";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test12CPLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test12CPLoginParams
    {

        #region Fields
        /// <summary>
        /// Type 'Universal' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Universal";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "Ov7Oe6g5JgnDgRD8h/313Y7NbHIFUPlDU5u7HL24uaQ=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test12AssertLogoutButtonExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test12AssertLogoutButtonExistsExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'Logout' button's property 'DisplayText' equals 'Logout'
        /// </summary>
        public string UILogoutButton1DisplayText = "Logout";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test12AssertWelcomeScreenShown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test12AssertWelcomeScreenShownExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'Welcome:' label's property 'DisplayText' equals 'Welcome:'
        /// </summary>
        public string UIWelcomeTextDisplayText = "Welcome:";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test13CPRegisterMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test13CPRegisterMovieParams
    {

        #region Fields
        /// <summary>
        /// Type 'Universal' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Universal";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "Ov7Oe6g5JgnDgRD8h/313Y7NbHIFUPlDU5u7HL24uaQ=";

        /// <summary>
        /// Type 'Detective Conan' in 'textBoxTitle' text box
        /// </summary>
        public string UITextBoxTitleEditText = "Detective Conan";

        /// <summary>
        /// Select '12-May-2012' in 'DatePickerReleaseDate' date picker
        /// </summary>
        public string UIDatePickerReleaseDatDatePickerDateAsString = "12-May-2012";

        /// <summary>
        /// Type 'It's crime time!' in 'textBoxDescription' text box
        /// </summary>
        public string UITextBoxDescriptionEditText = "It\'s crime time!";

        /// <summary>
        /// Select 'Unknown Name' check box
        /// </summary>
        public bool UIItemCheckBoxChecked = true;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test13AssertDetectiveConanName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test13AssertDetectiveConanNameExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that 'textBoxTitle' text box's property 'Text' equals 'Detective Conan'
        /// </summary>
        public string UITextBoxTitleEditText = "Detective Conan";
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRentItWindow : WpfWindow
    {

        public UIRentItWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "RentIt";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfEdit UITextBoxUsernameEdit
        {
            get
            {
                if ((this.mUITextBoxUsernameEdit == null))
                {
                    this.mUITextBoxUsernameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxUsernameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxUsername";
                    this.mUITextBoxUsernameEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxUsernameEdit;
            }
        }

        public WpfEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "passwordBox";
                    this.mUIPasswordBoxEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIPasswordBoxEdit;
            }
        }

        public WpfButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUILoginButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }

        public WpfButton UIViewprofileButton
        {
            get
            {
                if ((this.mUIViewprofileButton == null))
                {
                    this.mUIViewprofileButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewprofileButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button2";
                    this.mUIViewprofileButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIViewprofileButton;
            }
        }

        public WpfEdit UITextBoxFullNameEdit
        {
            get
            {
                if ((this.mUITextBoxFullNameEdit == null))
                {
                    this.mUITextBoxFullNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxFullNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxFullName";
                    this.mUITextBoxFullNameEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxFullNameEdit;
            }
        }

        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "logout";
                    this.mUILogoutButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }

        public WpfText UIWelcomeText
        {
            get
            {
                if ((this.mUIWelcomeText == null))
                {
                    this.mUIWelcomeText = new WpfText(this);
                    #region Search Criteria
                    this.mUIWelcomeText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LoginHeading";
                    this.mUIWelcomeText.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIWelcomeText;
            }
        }

        public UIRentItTitleBar UIRentItTitleBar
        {
            get
            {
                if ((this.mUIRentItTitleBar == null))
                {
                    this.mUIRentItTitleBar = new UIRentItTitleBar(this);
                }
                return this.mUIRentItTitleBar;
            }
        }

        public WpfButton UIListmoviesButton
        {
            get
            {
                if ((this.mUIListmoviesButton == null))
                {
                    this.mUIListmoviesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIListmoviesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUIListmoviesButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIListmoviesButton;
            }
        }

        public UIMovieListBoxList UIMovieListBoxList
        {
            get
            {
                if ((this.mUIMovieListBoxList == null))
                {
                    this.mUIMovieListBoxList = new UIMovieListBoxList(this);
                }
                return this.mUIMovieListBoxList;
            }
        }

        public WpfButton UIViewMovieButton
        {
            get
            {
                if ((this.mUIViewMovieButton == null))
                {
                    this.mUIViewMovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewMovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "View";
                    this.mUIViewMovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIViewMovieButton;
            }
        }

        public WpfEdit UITextBoxTitleEdit
        {
            get
            {
                if ((this.mUITextBoxTitleEdit == null))
                {
                    this.mUITextBoxTitleEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxTitleEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxTitle";
                    this.mUITextBoxTitleEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxTitleEdit;
            }
        }

        public WpfComboBox UISortModeComboBoxComboBox
        {
            get
            {
                if ((this.mUISortModeComboBoxComboBox == null))
                {
                    this.mUISortModeComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISortModeComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "sortModeComboBox";
                    this.mUISortModeComboBoxComboBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortModeComboBoxComboBox;
            }
        }

        public WpfEdit UITextBoxReleaseEdit
        {
            get
            {
                if ((this.mUITextBoxReleaseEdit == null))
                {
                    this.mUITextBoxReleaseEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxReleaseEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxRelease";
                    this.mUITextBoxReleaseEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxReleaseEdit;
            }
        }

        public WpfEdit UITextBoxSearchEdit
        {
            get
            {
                if ((this.mUITextBoxSearchEdit == null))
                {
                    this.mUITextBoxSearchEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxSearchEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxSearch";
                    this.mUITextBoxSearchEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxSearchEdit;
            }
        }

        public WpfButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "search";
                    this.mUISearchButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }

        public WpfComboBox UIGenreComboBoxComboBox
        {
            get
            {
                if ((this.mUIGenreComboBoxComboBox == null))
                {
                    this.mUIGenreComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIGenreComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "genreComboBox";
                    this.mUIGenreComboBoxComboBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIGenreComboBoxComboBox;
            }
        }

        public WpfButton UISortmoviesButton
        {
            get
            {
                if ((this.mUISortmoviesButton == null))
                {
                    this.mUISortmoviesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISortmoviesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "sortButton";
                    this.mUISortmoviesButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortmoviesButton;
            }
        }

        public WpfList UIEditionListBoxList
        {
            get
            {
                if ((this.mUIEditionListBoxList == null))
                {
                    this.mUIEditionListBoxList = new WpfList(this);
                    #region Search Criteria
                    this.mUIEditionListBoxList.SearchProperties[WpfList.PropertyNames.AutomationId] = "EditionListBox";
                    this.mUIEditionListBoxList.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIEditionListBoxList;
            }
        }

        public WpfButton UISelecteditionButton
        {
            get
            {
                if ((this.mUISelecteditionButton == null))
                {
                    this.mUISelecteditionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISelecteditionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "selectEdition";
                    this.mUISelecteditionButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISelecteditionButton;
            }
        }

        public WpfButton UIRentmovieButton
        {
            get
            {
                if ((this.mUIRentmovieButton == null))
                {
                    this.mUIRentmovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRentmovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "rentmovie";
                    this.mUIRentmovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIRentmovieButton;
            }
        }

        public WpfButton UIYourrentalsButton
        {
            get
            {
                if ((this.mUIYourrentalsButton == null))
                {
                    this.mUIYourrentalsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYourrentalsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "YourRentalsButton";
                    this.mUIYourrentalsButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIYourrentalsButton;
            }
        }

        public WpfText UITheMatrixReloadedText
        {
            get
            {
                if ((this.mUITheMatrixReloadedText == null))
                {
                    this.mUITheMatrixReloadedText = new WpfText(this);
                    #region Search Criteria
                    this.mUITheMatrixReloadedText.SearchProperties[WpfText.PropertyNames.AutomationId] = "textBlockTitle";
                    this.mUITheMatrixReloadedText.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITheMatrixReloadedText;
            }
        }

        public WpfButton UILogoutButton1
        {
            get
            {
                if ((this.mUILogoutButton1 == null))
                {
                    this.mUILogoutButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "logoutButton";
                    this.mUILogoutButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUILogoutButton1;
            }
        }

        public WpfButton UIRegisterMovieButton
        {
            get
            {
                if ((this.mUIRegisterMovieButton == null))
                {
                    this.mUIRegisterMovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRegisterMovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "registerMovieButton";
                    this.mUIRegisterMovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIRegisterMovieButton;
            }
        }

        public WpfDatePicker UIDatePickerReleaseDatDatePicker
        {
            get
            {
                if ((this.mUIDatePickerReleaseDatDatePicker == null))
                {
                    this.mUIDatePickerReleaseDatDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIDatePickerReleaseDatDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "DatePickerReleaseDate";
                    this.mUIDatePickerReleaseDatDatePicker.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIDatePickerReleaseDatDatePicker;
            }
        }

        public WpfEdit UITextBoxDescriptionEdit
        {
            get
            {
                if ((this.mUITextBoxDescriptionEdit == null))
                {
                    this.mUITextBoxDescriptionEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxDescriptionEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxDescription";
                    this.mUITextBoxDescriptionEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxDescriptionEdit;
            }
        }

        public UIGenreCheckListTable UIGenreCheckListTable
        {
            get
            {
                if ((this.mUIGenreCheckListTable == null))
                {
                    this.mUIGenreCheckListTable = new UIGenreCheckListTable(this);
                }
                return this.mUIGenreCheckListTable;
            }
        }

        public WpfButton UIRegistermovieButton1
        {
            get
            {
                if ((this.mUIRegistermovieButton1 == null))
                {
                    this.mUIRegistermovieButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRegistermovieButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "registermovie";
                    this.mUIRegistermovieButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIRegistermovieButton1;
            }
        }

        public WpfButton UIDeletemovieButton
        {
            get
            {
                if ((this.mUIDeletemovieButton == null))
                {
                    this.mUIDeletemovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDeletemovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "deletemovie";
                    this.mUIDeletemovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIDeletemovieButton;
            }
        }
        #endregion

        #region Fields
        private WpfEdit mUITextBoxUsernameEdit;

        private WpfEdit mUIPasswordBoxEdit;

        private WpfButton mUILoginButton;

        private WpfButton mUIViewprofileButton;

        private WpfEdit mUITextBoxFullNameEdit;

        private WpfButton mUILogoutButton;

        private WpfText mUIWelcomeText;

        private UIRentItTitleBar mUIRentItTitleBar;

        private WpfButton mUIListmoviesButton;

        private UIMovieListBoxList mUIMovieListBoxList;

        private WpfButton mUIViewMovieButton;

        private WpfEdit mUITextBoxTitleEdit;

        private WpfComboBox mUISortModeComboBoxComboBox;

        private WpfEdit mUITextBoxReleaseEdit;

        private WpfEdit mUITextBoxSearchEdit;

        private WpfButton mUISearchButton;

        private WpfComboBox mUIGenreComboBoxComboBox;

        private WpfButton mUISortmoviesButton;

        private WpfList mUIEditionListBoxList;

        private WpfButton mUISelecteditionButton;

        private WpfButton mUIRentmovieButton;

        private WpfButton mUIYourrentalsButton;

        private WpfText mUITheMatrixReloadedText;

        private WpfButton mUILogoutButton1;

        private WpfButton mUIRegisterMovieButton;

        private WpfDatePicker mUIDatePickerReleaseDatDatePicker;

        private WpfEdit mUITextBoxDescriptionEdit;

        private UIGenreCheckListTable mUIGenreCheckListTable;

        private WpfButton mUIRegistermovieButton1;

        private WpfButton mUIDeletemovieButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRentItTitleBar : WpfTitleBar
    {

        public UIRentItTitleBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion

        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMovieListBoxList : WpfList
    {

        public UIMovieListBoxList(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "MovieListBox";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfListItem UIOceansEleven1ListItem
        {
            get
            {
                if ((this.mUIOceansEleven1ListItem == null))
                {
                    this.mUIOceansEleven1ListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIOceansEleven1ListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "(Ocean\'s Eleven, 1)";
                    this.mUIOceansEleven1ListItem.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIOceansEleven1ListItem;
            }
        }

        public WpfListItem UIDetectiveConanRentItListItem
        {
            get
            {
                if ((this.mUIDetectiveConanRentItListItem == null))
                {
                    this.mUIDetectiveConanRentItListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDetectiveConanRentItListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "(Detective Conan, RentItClient.Types.Movie)";
                    this.mUIDetectiveConanRentItListItem.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIDetectiveConanRentItListItem;
            }
        }
        #endregion

        #region Fields
        private WpfListItem mUIOceansEleven1ListItem;

        private WpfListItem mUIDetectiveConanRentItListItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGenreCheckListTable : WpfTable
    {

        public UIGenreCheckListTable(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "GenreCheckList";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public UIItemDataItem UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem(this);
                }
                return this.mUIItemDataItem;
            }
        }
        #endregion

        #region Fields
        private UIItemDataItem mUIItemDataItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemDataItem : WpfControl
    {

        public UIItemDataItem(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties["Instance"] = "4";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIItemCheckBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion

        #region Fields
        private WpfCheckBox mUIItemCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseapplicationWindow : WinWindow
    {

        public UICloseapplicationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close application?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close application?");
            #endregion
        }

        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {

        public UIYesWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close application?");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close application?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangewindowWindow : WinWindow
    {

        public UIChangewindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Change window?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Change window?");
            #endregion
        }

        #region Properties
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow1 : WinWindow
    {

        public UIYesWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Change window?");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Change window?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRentItWindow1 : WinWindow
    {

        public UIRentItWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "RentIt";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("RentIt");
            #endregion
        }
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIUploadeditionWindow : WinWindow
    {

        public UIUploadeditionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Upload edition?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Upload edition?");
            #endregion
        }

        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion

        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {

        public UINOWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Upload edition?");
            #endregion
        }

        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Upload edition?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUINOButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDeleteMovieWindow : WinWindow
    {

        public UIDeleteMovieWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Delete Movie?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Delete Movie?");
            #endregion
        }

        #region Properties
        public UIYesWindow2 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow2(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow2 mUIYesWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow2 : WinWindow
    {

        public UIYesWindow2(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Delete Movie?");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Delete Movie?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
