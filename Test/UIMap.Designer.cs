// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RentIt.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;


    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {

        /// <summary>
        /// Test02UserLogin - Use 'Test02UserLoginParams' to pass parameters into this method.
        /// </summary>
        public void Test02UserLogin()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIViewprofileButton = this.UIRentItWindow.UIViewprofileButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(340, 18));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test02UserLoginParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(71, 11));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test02UserLoginParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(29, 10));

            // Click 'View profile' button
            Mouse.Click(uIViewprofileButton, new Point(61, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(33, 16));
        }

        /// <summary>
        /// Test04UserLogout - Use 'Test04UserLogoutParams' to pass parameters into this method.
        /// </summary>
        public void Test04UserLogout()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uILogoutButton = this.UIRentItWindow.UILogoutButton;
            WinButton uIYesButton = this.UIChangewindowWindow.UIYesWindow.UIYesButton;
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton1 = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(343, 13));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test04UserLogoutParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(98, 11));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test04UserLogoutParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(34, 5));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(14, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(58, 8));

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(702, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(42, 19));
        }

        /// <summary>
        /// Test05UserViewAllMovies - Use 'Test05UserViewAllMoviesParams' to pass parameters into this method.
        /// </summary>
        public void Test05UserViewAllMovies()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIListmoviesButton = this.UIRentItWindow.UIListmoviesButton;
            WpfComboBox uISortModeComboBoxComboBox = this.UIRentItWindow.UISortModeComboBoxComboBox;
            WpfComboBox uIGenreComboBoxComboBox = this.UIRentItWindow.UIGenreComboBoxComboBox;
            WpfButton uISortmoviesButton = this.UIRentItWindow.UISortmoviesButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(339, 9));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test05UserViewAllMoviesParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(40, 10));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test05UserViewAllMoviesParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(8, 8));

            // Click 'List movies' button
            Mouse.Click(uIListmoviesButton, new Point(87, 14));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox.SelectedItem = this.Test05UserViewAllMoviesParams.UISortModeComboBoxComboBoxSelectedItem;

            // Select '(All, 0)' in 'genreComboBox' combo box
            uIGenreComboBoxComboBox.SelectedItem = this.Test05UserViewAllMoviesParams.UIGenreComboBoxComboBoxSelectedItem;

            // Click 'Sort movies' button
            Mouse.Click(uISortmoviesButton, new Point(18, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(38, 4));
        }

        /// <summary>
        /// Test06UserViewMovieByNewest - Use 'Test06UserViewMovieByNewestParams' to pass parameters into this method.
        /// </summary>
        public void Test06UserViewMovieByNewest()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfComboBox uISortModeComboBoxComboBox = this.UIRentItWindow.UISortModeComboBoxComboBox;
            WpfComboBox uIGenreComboBoxComboBox = this.UIRentItWindow.UIGenreComboBoxComboBox;
            WpfButton uISortmoviesButton = this.UIRentItWindow.UISortmoviesButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            WpfButton uIListmoviesButton = this.UIRentItWindow.UIListmoviesButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(356, 7));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test06UserViewMovieByNewestParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(47, 17));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test06UserViewMovieByNewestParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(30, 17));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox.SelectedItem = this.Test06UserViewMovieByNewestParams.UISortModeComboBoxComboBoxSelectedItem;

            // Select '(All, 0)' in 'genreComboBox' combo box
            uIGenreComboBoxComboBox.SelectedItem = this.Test06UserViewMovieByNewestParams.UIGenreComboBoxComboBoxSelectedItem;

            // Click 'Sort movies' button
            Mouse.Click(uISortmoviesButton, new Point(12, 11));

            // Select '(Ocean's Eleven\, 1)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test06UserViewMovieByNewestParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(40, 17));

            // Click 'List movies' button
            Mouse.Click(uIListmoviesButton, new Point(58, 15));

            uIMovieListBoxList.WaitForControlEnabled();
            // Select '(The Matrix\, 5)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test06UserViewMovieByNewestParams.UIMovieListBoxListSelectedItemsAsString1;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(31, 18));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(36, 4));
        }

        /// <summary>
        /// Test07UserSearchForMovie - Use 'Test07UserSearchForMovieParams' to pass parameters into this method.
        /// </summary>
        public void Test07UserSearchForMovie()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfEdit uITextBoxSearchEdit = this.UIRentItWindow.UITextBoxSearchEdit;
            WpfButton uISearchButton = this.UIRentItWindow.UISearchButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(331, 10));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test07UserSearchForMovieParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(60, 8));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test07UserSearchForMovieParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(30, 15));

            // Type 'The Matrix' in 'textBoxSearch' text box
            uITextBoxSearchEdit.Text = this.Test07UserSearchForMovieParams.UITextBoxSearchEditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(7, 8));

            // Select '(The Matrix\, 5)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test07UserSearchForMovieParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(32, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(26, 9));
        }

        /// <summary>
        /// Test08UserViewMoviesByGenre - Use 'Test08UserViewMoviesByGenreParams' to pass parameters into this method.
        /// </summary>
        public void Test08UserViewMoviesByGenre()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfComboBox uISortModeComboBoxComboBox = this.UIRentItWindow.UISortModeComboBoxComboBox;
            WpfComboBox uIGenreComboBoxComboBox = this.UIRentItWindow.UIGenreComboBoxComboBox;
            WpfButton uISortmoviesButton = this.UIRentItWindow.UISortmoviesButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            WpfButton uIListmoviesButton = this.UIRentItWindow.UIListmoviesButton;
            WpfComboBox uISortModeComboBoxComboBox1 = this.UIRentItWindow.UISortModeComboBoxComboBox1;
            WpfComboBox uIGenreComboBoxComboBox1 = this.UIRentItWindow.UIGenreComboBoxComboBox1;
            WpfButton uISortmoviesButton1 = this.UIRentItWindow.UISortmoviesButton1;
            WpfList uIMovieListBoxList1 = this.UIRentItWindow.UIMovieListBoxList1;
            WpfButton uIViewMovieButton1 = this.UIRentItWindow.UIViewMovieButton1;
            WpfButton uIListmoviesButton1 = this.UIRentItWindow.UIListmoviesButton1;
            WpfComboBox uISortModeComboBoxComboBox3 = this.UIRentItWindow.UISortModeComboBoxComboBox3;
            WpfComboBox uIGenreComboBoxComboBox3 = this.UIRentItWindow.UIGenreComboBoxComboBox3;
            WpfButton uISortmoviesButton3 = this.UIRentItWindow.UISortmoviesButton3;
            WpfList uIMovieListBoxList2 = this.UIRentItWindow.UIMovieListBoxList2;
            WpfButton uIViewMovieButton2 = this.UIRentItWindow.UIViewMovieButton2;
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(333, 18));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test08UserViewMoviesByGenreParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(79, 3));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test08UserViewMoviesByGenreParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(47, 9));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox.SelectedItem = this.Test08UserViewMoviesByGenreParams.UISortModeComboBoxComboBoxSelectedItem;

            // Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
            uIGenreComboBoxComboBox.SelectedItem = this.Test08UserViewMoviesByGenreParams.UIGenreComboBoxComboBoxSelectedItem;

            // Click 'Sort movies' button
            Mouse.Click(uISortmoviesButton, new Point(40, 16));

            // Select '(The Matrix\, 5)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test08UserViewMoviesByGenreParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(53, 17));

            // Click 'List movies' button
            Mouse.Click(uIListmoviesButton, new Point(78, 9));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox1.SelectedItem = this.Test08UserViewMoviesByGenreParams.UISortModeComboBoxComboBox1SelectedItem;

            // Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
            uIGenreComboBoxComboBox1.SelectedItem = this.Test08UserViewMoviesByGenreParams.UIGenreComboBoxComboBox1SelectedItem;

            // Click 'Sort movies' button
            Mouse.Click(uISortmoviesButton1, new Point(47, 15));

            // Select '(The Matrix Reloaded\, 6)' in 'MovieListBox' list box
            uIMovieListBoxList1.SelectedItemsAsString = this.Test08UserViewMoviesByGenreParams.UIMovieListBoxList1SelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton1, new Point(63, 15));

            // Click 'List movies' button
            Mouse.Click(uIListmoviesButton1, new Point(96, 15));

            // Select '(Newest, 1)' in 'sortModeComboBox' combo box
            uISortModeComboBoxComboBox3.SelectedItem = this.Test08UserViewMoviesByGenreParams.UISortModeComboBoxComboBox3SelectedItem;

            // Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
            uIGenreComboBoxComboBox3.SelectedItem = this.Test08UserViewMoviesByGenreParams.UIGenreComboBoxComboBox3SelectedItem;

            // Click 'Sort movies' button
            Mouse.Click(uISortmoviesButton3, new Point(47, 11));

            // Select '(The Matrix Revolutions\, 7)' in 'MovieListBox' list box
            uIMovieListBoxList2.SelectedItemsAsString = this.Test08UserViewMoviesByGenreParams.UIMovieListBoxList2SelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton2, new Point(84, 9));

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(704, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(52, 13));
        }

        /// <summary>
        /// Test09UserrentSpecificMovieEdition - Use 'Test09UserrentSpecificMovieEditionParams' to pass parameters into this method.
        /// </summary>
        public void Test09UserrentSpecificMovieEdition()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            WpfList uIEditionListBoxList = this.UIRentItWindow.UIEditionListBoxList;
            WpfButton uISelecteditionButton = this.UIRentItWindow.UISelecteditionButton;
            WpfButton uIRentmovieButton = this.UIRentItWindow.UIRentmovieButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(330, 13));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test09UserrentSpecificMovieEditionParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(46, 3));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test09UserrentSpecificMovieEditionParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(16, 11));

            // Select '(The Lord of the Rings: The Return of the King\, 14)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test09UserrentSpecificMovieEditionParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(26, 14));

            // Select '(SD\, 38)' in 'EditionListBox' list box
            uIEditionListBoxList.SelectedItemsAsString = this.Test09UserrentSpecificMovieEditionParams.UIEditionListBoxListSelectedItemsAsString;

            // Click 'Select edition' button
            Mouse.Click(uISelecteditionButton, new Point(82, 10));

            // Click 'Rent movie' button
            Mouse.Click(uIRentmovieButton, new Point(57, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(49, 13));
        }

        /// <summary>
        /// Test12CPLoginLogout - Use 'Test12CPLoginLogoutParams' to pass parameters into this method.
        /// </summary>
        public void Test12CPLoginLogout()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uILogoutButton1 = this.UIRentItWindow.UILogoutButton1;
            WinButton uIYesButton = this.UIChangewindowWindow.UIYesWindow.UIYesButton;
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton1 = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(336, 5));

            // Type 'Universal' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test12CPLoginLogoutParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(103, 10));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test12CPLoginLogoutParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(45, 8));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton1, new Point(36, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(36, 14));

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(693, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(23, 11));
        }

        /// <summary>
        /// Test13CPRegisterMovie - Use 'Test13CPRegisterMovieParams' to pass parameters into this method.
        /// </summary>
        public void Test13CPRegisterMovie()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIRegisterMovieButton = this.UIRentItWindow.UIRegisterMovieButton;
            WpfEdit uITextBoxTitleEdit = this.UIRentItWindow.UITextBoxTitleEdit;
            WpfDatePicker uIDatePickerReleaseDatDatePicker = this.UIRentItWindow.UIDatePickerReleaseDatDatePicker;
            WpfEdit uITextBoxDescriptionEdit = this.UIRentItWindow.UITextBoxDescriptionEdit;
            WpfCheckBox uIItemCheckBox = this.UIRentItWindow.UIGenreCheckListTable.UIItemDataItem.UIItemCheckBox;
            WpfCheckBox uIItemCheckBox1 = this.UIRentItWindow.UIGenreCheckListTable.UIItemDataItem1.UIItemCheckBox;
            WpfCheckBox uIItemCheckBox2 = this.UIRentItWindow.UIGenreCheckListTable.UIItemDataItem2.UIItemCheckBox;
            WpfButton uIRegistermovieButton1 = this.UIRentItWindow.UIRegistermovieButton1;
            WinButton uINOButton = this.UIUploadeditionWindow.UINOWindow.UINOButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(353, 11));

            // Type 'Universal' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test13CPRegisterMovieParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(54, 6));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test13CPRegisterMovieParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(21, 6));

            // Click 'Register Movie' button
            Mouse.Click(uIRegisterMovieButton, new Point(88, 8));

            // Type 'Bleach' in 'textBoxTitle' text box
            uITextBoxTitleEdit.Text = this.Test13CPRegisterMovieParams.UITextBoxTitleEditText;

            // Select '12-May-2012' in 'DatePickerReleaseDate' date picker
            uIDatePickerReleaseDatDatePicker.DateAsString = this.Test13CPRegisterMovieParams.UIDatePickerReleaseDatDatePickerDateAsString;

            // Type 'Action!' in 'textBoxDescription' text box
            uITextBoxDescriptionEdit.Text = this.Test13CPRegisterMovieParams.UITextBoxDescriptionEditText;

            // Select 'Unknown Name' check box
            uIItemCheckBox.Checked = this.Test13CPRegisterMovieParams.UIItemCheckBoxChecked;

            // Select 'Unknown Name' check box
            uIItemCheckBox1.Checked = this.Test13CPRegisterMovieParams.UIItemCheckBoxChecked1;

            // Select 'Unknown Name' check box
            uIItemCheckBox2.Checked = this.Test13CPRegisterMovieParams.UIItemCheckBoxChecked2;

            // Click 'Register movie' button
            Mouse.Click(uIRegistermovieButton1, new Point(134, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(16, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(34, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 9));
        }

        /// <summary>
        /// LoginCheck - Use 'LoginCheckParams' to pass parameters into this method.
        /// </summary>
        public void LoginCheck()
        {
            #region Variable Declarations
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIJAButton = this.UICloseapplicationWindow.UIYesWindow.UIJAButton;
            #endregion

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.LoginCheckParams.UITextBoxUsernameEditText;

            // Type '{Tab}' in 'textBoxUsername' text box
            Keyboard.SendKeys(uITextBoxUsernameEdit, this.LoginCheckParams.UITextBoxUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginCheckParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(58, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(37, 10));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(56, 5));
        }

        /// <summary>
        /// LoginTest - Use 'LoginTestParams' to pass parameters into this method.
        /// </summary>
        public void LoginTest()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIViewprofileButton = this.UIRentItWindow.UIViewprofileButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinTitleBar uICloseapplicationTitleBar = this.UICloseapplicationWindow.UICloseapplicationTitleBar;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(366, 17));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.LoginTestParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(37, 7));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginTestParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(25, 7));

            // Click 'View profile' button
            Mouse.Click(uIViewprofileButton, new Point(81, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 14));

            // Click 'Close application?' title bar
            Mouse.Click(uICloseapplicationTitleBar, new Point(216, 11));

            // Click '&Ja' button
            Mouse.Click(uIYesButton, new Point(25, 13));
        }

        /// <summary>
        /// GUITest01CreateNewUser - Use 'GUITest01CreateNewUserParams' to pass parameters into this method.
        /// </summary>
        public void GUITest01CreateNewUser()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfButton uISignupButton = this.UIRentItWindow.UISignupButton;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uITextBoxFullNameEdit = this.UIRentItWindow.UITextBoxFullNameEdit;
            WpfEdit uITextBoxEmailEdit = this.UIRentItWindow.UITextBoxEmailEdit;
            WpfEdit uIPasswordBox1Edit = this.UIRentItWindow.UIPasswordBox1Edit;
            WpfEdit uIPasswordBoxConfirmEdit = this.UIRentItWindow.UIPasswordBoxConfirmEdit;
            WpfButton uISubmitButton = this.UIRentItWindow.UISubmitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfEdit uITextBoxUsernameEdit1 = this.UIRentItWindow.UITextBoxUsernameEdit1;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uICloseButton = this.UIRentItWindow.UIRentItTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(304, 1));

            // Click 'Signup' button
            Mouse.Click(uISignupButton, new Point(45, 7));

            // Type 'TestUser' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.GUITest01CreateNewUserParams.UITextBoxUsernameEditText;

            // Type 'Test User' in 'textBoxFullName' text box
            uITextBoxFullNameEdit.Text = this.GUITest01CreateNewUserParams.UITextBoxFullNameEditText;

            // Type 'testuser' in 'textBoxEmail' text box
            uITextBoxEmailEdit.Text = this.GUITest01CreateNewUserParams.UITextBoxEmailEditText;

            // Type 'Alt, Control + 2' in 'textBoxEmail' text box
            Keyboard.SendKeys(uITextBoxEmailEdit, this.GUITest01CreateNewUserParams.UITextBoxEmailEditSendKeys, (ModifierKeys.Alt | ModifierKeys.Control));

            // Type 'testuser@itu.dk' in 'textBoxEmail' text box
            uITextBoxEmailEdit.Text = this.GUITest01CreateNewUserParams.UITextBoxEmailEditText1;

            // Click 'passwordBox1' text box
            Mouse.Click(uIPasswordBox1Edit, new Point(70, 8));

            // Type '********' in 'passwordBox1' text box
            Keyboard.SendKeys(uIPasswordBox1Edit, this.GUITest01CreateNewUserParams.UIPasswordBox1EditSendKeys, true);

            // Click 'passwordBoxConfirm' text box
            Mouse.Click(uIPasswordBoxConfirmEdit, new Point(61, 11));

            // Type '********' in 'passwordBoxConfirm' text box
            Keyboard.SendKeys(uIPasswordBoxConfirmEdit, this.GUITest01CreateNewUserParams.UIPasswordBoxConfirmEditSendKeys, true);

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(96, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(60, 7));

            // Type 'TestUser' in 'textBoxUsername' text box
            uITextBoxUsernameEdit1.Text = this.GUITest01CreateNewUserParams.UITextBoxUsernameEdit1Text;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(69, 5));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.GUITest01CreateNewUserParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(28, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(33, 16));
        }

        /// <summary>
        /// Test03UserEditUserInformation - Use 'Test03UserEditUserInformationParams' to pass parameters into this method.
        /// </summary>
        public void Test03UserEditUserInformation()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfButton uIViewprofileButton = this.UIRentItWindow.UIViewprofileButton;
            WpfButton uIEditinformationButton = this.UIRentItWindow.UIEditinformationButton;
            WpfEdit uITextBoxFullNameEdit = this.UIRentItWindow.UITextBoxFullNameEdit;
            WpfButton uISavechangesButton = this.UIRentItWindow.UISavechangesButton;
            WinButton uIYesButton = this.UISaveChangesWindow.UIYesWindow.UIYesButton;
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton1 = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(340, 9));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test03UserEditUserInformationParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(59, 5));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test03UserEditUserInformationParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(29, 15));

            // Click 'View profile' button
            Mouse.Click(uIViewprofileButton, new Point(58, 12));

            // Click 'Edit information' button
            Mouse.Click(uIEditinformationButton, new Point(19, 12));

            // Type 'Neo Smith' in 'textBoxFullName' text box
            uITextBoxFullNameEdit.Text = this.Test03UserEditUserInformationParams.UITextBoxFullNameEditText;

            // Click 'Save changes' button
            Mouse.Click(uISavechangesButton, new Point(82, 17));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(54, 5));

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(716, 3));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(31, 15));
        }

        /// <summary>
        /// Test10UserRentAndViewRentals - Use 'Test10UserRentAndViewRentalsParams' to pass parameters into this method.
        /// </summary>
        public void Test10UserRentAndViewRentals()
        {
            #region Variable Declarations
            WpfTitleBar uIRentItTitleBar = this.UIRentItWindow.UIRentItTitleBar;
            WpfEdit uITextBoxUsernameEdit = this.UIRentItWindow.UITextBoxUsernameEdit;
            WpfEdit uIPasswordBoxEdit = this.UIRentItWindow.UIPasswordBoxEdit;
            WpfButton uILoginButton = this.UIRentItWindow.UILoginButton;
            WpfList uIMovieListBoxList = this.UIRentItWindow.UIMovieListBoxList;
            WpfButton uIViewMovieButton = this.UIRentItWindow.UIViewMovieButton;
            WpfList uIEditionListBoxList = this.UIRentItWindow.UIEditionListBoxList;
            WpfButton uISelecteditionButton = this.UIRentItWindow.UISelecteditionButton;
            WpfButton uIRentmovieButton = this.UIRentItWindow.UIRentmovieButton;
            WpfButton uIYourrentalsButton = this.UIRentItWindow.UIYourrentalsButton;
            WinWindow uIRentItWindow1 = this.UIRentItWindow1;
            WinButton uIYesButton = this.UICloseapplicationWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'RentIt' title bar
            Mouse.Click(uIRentItTitleBar, new Point(327, 18));

            // Type 'Smith' in 'textBoxUsername' text box
            uITextBoxUsernameEdit.Text = this.Test10UserRentAndViewRentalsParams.UITextBoxUsernameEditText;

            // Click 'passwordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(89, 18));

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.Test10UserRentAndViewRentalsParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(37, 15));

            // Select '(The Lord of the Rings: The Fellowship of the Ring\, 12)' in 'MovieListBox' list box
            uIMovieListBoxList.SelectedItemsAsString = this.Test10UserRentAndViewRentalsParams.UIMovieListBoxListSelectedItemsAsString;

            // Click 'View Movie' button
            Mouse.Click(uIViewMovieButton, new Point(32, 18));

            // Select '(SD\, 32)' in 'EditionListBox' list box
            uIEditionListBoxList.SelectedItemsAsString = this.Test10UserRentAndViewRentalsParams.UIEditionListBoxListSelectedItemsAsString;

            // Click 'Select edition' button
            Mouse.Click(uISelecteditionButton, new Point(97, 13));

            // Click 'Rent movie' button
            Mouse.Click(uIRentmovieButton, new Point(97, 13));

            // Click 'Your rentals' button
            Mouse.Click(uIYourrentalsButton, new Point(31, 7));

            // Click 'RentIt' window
            Mouse.Click(uIRentItWindow1, new Point(703, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(42, 11));
        }

        #region Properties
        public virtual Test02UserLoginParams Test02UserLoginParams
        {
            get
            {
                if ((this.mTest02UserLoginParams == null))
                {
                    this.mTest02UserLoginParams = new Test02UserLoginParams();
                }
                return this.mTest02UserLoginParams;
            }
        }

        public virtual Test04UserLogoutParams Test04UserLogoutParams
        {
            get
            {
                if ((this.mTest04UserLogoutParams == null))
                {
                    this.mTest04UserLogoutParams = new Test04UserLogoutParams();
                }
                return this.mTest04UserLogoutParams;
            }
        }

        public virtual Test05UserViewAllMoviesParams Test05UserViewAllMoviesParams
        {
            get
            {
                if ((this.mTest05UserViewAllMoviesParams == null))
                {
                    this.mTest05UserViewAllMoviesParams = new Test05UserViewAllMoviesParams();
                }
                return this.mTest05UserViewAllMoviesParams;
            }
        }

        public virtual Test06UserViewMovieByNewestParams Test06UserViewMovieByNewestParams
        {
            get
            {
                if ((this.mTest06UserViewMovieByNewestParams == null))
                {
                    this.mTest06UserViewMovieByNewestParams = new Test06UserViewMovieByNewestParams();
                }
                return this.mTest06UserViewMovieByNewestParams;
            }
        }

        public virtual Test07UserSearchForMovieParams Test07UserSearchForMovieParams
        {
            get
            {
                if ((this.mTest07UserSearchForMovieParams == null))
                {
                    this.mTest07UserSearchForMovieParams = new Test07UserSearchForMovieParams();
                }
                return this.mTest07UserSearchForMovieParams;
            }
        }

        public virtual Test08UserViewMoviesByGenreParams Test08UserViewMoviesByGenreParams
        {
            get
            {
                if ((this.mTest08UserViewMoviesByGenreParams == null))
                {
                    this.mTest08UserViewMoviesByGenreParams = new Test08UserViewMoviesByGenreParams();
                }
                return this.mTest08UserViewMoviesByGenreParams;
            }
        }

        public virtual Test09UserrentSpecificMovieEditionParams Test09UserrentSpecificMovieEditionParams
        {
            get
            {
                if ((this.mTest09UserrentSpecificMovieEditionParams == null))
                {
                    this.mTest09UserrentSpecificMovieEditionParams = new Test09UserrentSpecificMovieEditionParams();
                }
                return this.mTest09UserrentSpecificMovieEditionParams;
            }
        }

        public virtual Test12CPLoginLogoutParams Test12CPLoginLogoutParams
        {
            get
            {
                if ((this.mTest12CPLoginLogoutParams == null))
                {
                    this.mTest12CPLoginLogoutParams = new Test12CPLoginLogoutParams();
                }
                return this.mTest12CPLoginLogoutParams;
            }
        }

        public virtual Test13CPRegisterMovieParams Test13CPRegisterMovieParams
        {
            get
            {
                if ((this.mTest13CPRegisterMovieParams == null))
                {
                    this.mTest13CPRegisterMovieParams = new Test13CPRegisterMovieParams();
                }
                return this.mTest13CPRegisterMovieParams;
            }
        }

        public virtual LoginCheckParams LoginCheckParams
        {
            get
            {
                if ((this.mLoginCheckParams == null))
                {
                    this.mLoginCheckParams = new LoginCheckParams();
                }
                return this.mLoginCheckParams;
            }
        }

        public virtual LoginTestParams LoginTestParams
        {
            get
            {
                if ((this.mLoginTestParams == null))
                {
                    this.mLoginTestParams = new LoginTestParams();
                }
                return this.mLoginTestParams;
            }
        }

        public virtual GUITest01CreateNewUserParams GUITest01CreateNewUserParams
        {
            get
            {
                if ((this.mGUITest01CreateNewUserParams == null))
                {
                    this.mGUITest01CreateNewUserParams = new GUITest01CreateNewUserParams();
                }
                return this.mGUITest01CreateNewUserParams;
            }
        }

        public virtual Test03UserEditUserInformationParams Test03UserEditUserInformationParams
        {
            get
            {
                if ((this.mTest03UserEditUserInformationParams == null))
                {
                    this.mTest03UserEditUserInformationParams = new Test03UserEditUserInformationParams();
                }
                return this.mTest03UserEditUserInformationParams;
            }
        }

        public virtual Test10UserRentAndViewRentalsParams Test10UserRentAndViewRentalsParams
        {
            get
            {
                if ((this.mTest10UserRentAndViewRentalsParams == null))
                {
                    this.mTest10UserRentAndViewRentalsParams = new Test10UserRentAndViewRentalsParams();
                }
                return this.mTest10UserRentAndViewRentalsParams;
            }
        }

        public UIRentItWindow UIRentItWindow
        {
            get
            {
                if ((this.mUIRentItWindow == null))
                {
                    this.mUIRentItWindow = new UIRentItWindow();
                }
                return this.mUIRentItWindow;
            }
        }

        public UICloseapplicationWindow UICloseapplicationWindow
        {
            get
            {
                if ((this.mUICloseapplicationWindow == null))
                {
                    this.mUICloseapplicationWindow = new UICloseapplicationWindow();
                }
                return this.mUICloseapplicationWindow;
            }
        }

        public UIChangewindowWindow UIChangewindowWindow
        {
            get
            {
                if ((this.mUIChangewindowWindow == null))
                {
                    this.mUIChangewindowWindow = new UIChangewindowWindow();
                }
                return this.mUIChangewindowWindow;
            }
        }

        public UIRentItWindow1 UIRentItWindow1
        {
            get
            {
                if ((this.mUIRentItWindow1 == null))
                {
                    this.mUIRentItWindow1 = new UIRentItWindow1();
                }
                return this.mUIRentItWindow1;
            }
        }

        public UIUploadeditionWindow UIUploadeditionWindow
        {
            get
            {
                if ((this.mUIUploadeditionWindow == null))
                {
                    this.mUIUploadeditionWindow = new UIUploadeditionWindow();
                }
                return this.mUIUploadeditionWindow;
            }
        }

        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }

        public UISaveChangesWindow UISaveChangesWindow
        {
            get
            {
                if ((this.mUISaveChangesWindow == null))
                {
                    this.mUISaveChangesWindow = new UISaveChangesWindow();
                }
                return this.mUISaveChangesWindow;
            }
        }
        #endregion

        #region Fields
        private Test02UserLoginParams mTest02UserLoginParams;

        private Test04UserLogoutParams mTest04UserLogoutParams;

        private Test05UserViewAllMoviesParams mTest05UserViewAllMoviesParams;

        private Test06UserViewMovieByNewestParams mTest06UserViewMovieByNewestParams;

        private Test07UserSearchForMovieParams mTest07UserSearchForMovieParams;

        private Test08UserViewMoviesByGenreParams mTest08UserViewMoviesByGenreParams;

        private Test09UserrentSpecificMovieEditionParams mTest09UserrentSpecificMovieEditionParams;

        private Test12CPLoginLogoutParams mTest12CPLoginLogoutParams;

        private Test13CPRegisterMovieParams mTest13CPRegisterMovieParams;

        private LoginCheckParams mLoginCheckParams;

        private LoginTestParams mLoginTestParams;

        private GUITest01CreateNewUserParams mGUITest01CreateNewUserParams;

        private Test03UserEditUserInformationParams mTest03UserEditUserInformationParams;

        private Test10UserRentAndViewRentalsParams mTest10UserRentAndViewRentalsParams;

        private UIRentItWindow mUIRentItWindow;

        private UICloseapplicationWindow mUICloseapplicationWindow;

        private UIChangewindowWindow mUIChangewindowWindow;

        private UIRentItWindow1 mUIRentItWindow1;

        private UIUploadeditionWindow mUIUploadeditionWindow;

        private UIOKWindow mUIOKWindow;

        private UISaveChangesWindow mUISaveChangesWindow;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test02UserLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test02UserLoginParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test04UserLogout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test04UserLogoutParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test05UserViewAllMovies'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test05UserViewAllMoviesParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBoxSelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(All, 0)' in 'genreComboBox' combo box
        /// </summary>
        public string UIGenreComboBoxComboBoxSelectedItem = "(All, 0)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test06UserViewMovieByNewest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test06UserViewMovieByNewestParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBoxSelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(All, 0)' in 'genreComboBox' combo box
        /// </summary>
        public string UIGenreComboBoxComboBoxSelectedItem = "(All, 0)";

        /// <summary>
        /// Select '(Ocean's Eleven\, 1)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(Ocean\'s Eleven\\, 1)";

        /// <summary>
        /// Select '(The Matrix\, 5)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString1 = "(The Matrix\\, 5)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test07UserSearchForMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test07UserSearchForMovieParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Type 'The Matrix' in 'textBoxSearch' text box
        /// </summary>
        public string UITextBoxSearchEditText = "The Matrix";

        /// <summary>
        /// Select '(The Matrix\, 5)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix\\, 5)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test08UserViewMoviesByGenre'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test08UserViewMoviesByGenreParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBoxSelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
        /// </summary>
        public string UIGenreComboBoxComboBoxSelectedItem = "(Sci-Fi, 9)";

        /// <summary>
        /// Select '(The Matrix\, 5)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Matrix\\, 5)";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBox1SelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
        /// </summary>
        public string UIGenreComboBoxComboBox1SelectedItem = "(Sci-Fi, 9)";

        /// <summary>
        /// Select '(The Matrix Reloaded\, 6)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxList1SelectedItemsAsString = "(The Matrix Reloaded\\, 6)";

        /// <summary>
        /// Select '(Newest, 1)' in 'sortModeComboBox' combo box
        /// </summary>
        public string UISortModeComboBoxComboBox3SelectedItem = "(Newest, 1)";

        /// <summary>
        /// Select '(Sci-Fi, 9)' in 'genreComboBox' combo box
        /// </summary>
        public string UIGenreComboBoxComboBox3SelectedItem = "(Sci-Fi, 9)";

        /// <summary>
        /// Select '(The Matrix Revolutions\, 7)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxList2SelectedItemsAsString = "(The Matrix Revolutions\\, 7)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test09UserrentSpecificMovieEdition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test09UserrentSpecificMovieEditionParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(The Lord of the Rings: The Return of the King\, 14)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Lord of the Rings: The Return of the King\\, 14)";

        /// <summary>
        /// Select '(SD\, 38)' in 'EditionListBox' list box
        /// </summary>
        public string UIEditionListBoxListSelectedItemsAsString = "(SD\\, 38)";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test12CPLoginLogout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test12CPLoginLogoutParams
    {

        #region Fields
        /// <summary>
        /// Type 'Universal' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Universal";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "Ov7Oe6g5JgnDgRD8h/313Y7NbHIFUPlDU5u7HL24uaQ=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test13CPRegisterMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test13CPRegisterMovieParams
    {

        #region Fields
        /// <summary>
        /// Type 'Universal' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Universal";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "Ov7Oe6g5JgnDgRD8h/313Y7NbHIFUPlDU5u7HL24uaQ=";

        /// <summary>
        /// Type 'Bleach' in 'textBoxTitle' text box
        /// </summary>
        public string UITextBoxTitleEditText = "Bleach";

        /// <summary>
        /// Select '12-May-2012' in 'DatePickerReleaseDate' date picker
        /// </summary>
        public string UIDatePickerReleaseDatDatePickerDateAsString = "12-May-2012";

        /// <summary>
        /// Type 'Action!' in 'textBoxDescription' text box
        /// </summary>
        public string UITextBoxDescriptionEditText = "Action!";

        /// <summary>
        /// Select 'Unknown Name' check box
        /// </summary>
        public bool UIItemCheckBoxChecked = true;

        /// <summary>
        /// Select 'Unknown Name' check box
        /// </summary>
        public bool UIItemCheckBoxChecked1 = true;

        /// <summary>
        /// Select 'Unknown Name' check box
        /// </summary>
        public bool UIItemCheckBoxChecked2 = true;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'LoginCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class LoginCheckParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '{Tab}' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditSendKeys = "{Tab}";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "9kUTAD7XUBlksbuiNPeUq8wL5H8e/7BXjvjwlcQCeB3JH1vpj9+XNN70xU7d/lNjoVkY0XsQgkrMPq+Vu" +
            "sQH1g==";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'LoginTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class LoginTestParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'GUITest01CreateNewUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class GUITest01CreateNewUserParams
    {

        #region Fields
        /// <summary>
        /// Type 'TestUser' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "TestUser";

        /// <summary>
        /// Type 'Test User' in 'textBoxFullName' text box
        /// </summary>
        public string UITextBoxFullNameEditText = "Test User";

        /// <summary>
        /// Type 'testuser' in 'textBoxEmail' text box
        /// </summary>
        public string UITextBoxEmailEditText = "testuser";

        /// <summary>
        /// Type 'Alt, Control + 2' in 'textBoxEmail' text box
        /// </summary>
        public string UITextBoxEmailEditSendKeys = "2";

        /// <summary>
        /// Type 'testuser@itu.dk' in 'textBoxEmail' text box
        /// </summary>
        public string UITextBoxEmailEditText1 = "testuser@itu.dk";

        /// <summary>
        /// Type '********' in 'passwordBox1' text box
        /// </summary>
        public string UIPasswordBox1EditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Type '********' in 'passwordBoxConfirm' text box
        /// </summary>
        public string UIPasswordBoxConfirmEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Type 'TestUser' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEdit1Text = "TestUser";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test03UserEditUserInformation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test03UserEditUserInformationParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Type 'Neo Smith' in 'textBoxFullName' text box
        /// </summary>
        public string UITextBoxFullNameEditText = "Neo Smith";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'Test10UserRentAndViewRentals'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Test10UserRentAndViewRentalsParams
    {

        #region Fields
        /// <summary>
        /// Type 'Smith' in 'textBoxUsername' text box
        /// </summary>
        public string UITextBoxUsernameEditText = "Smith";

        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "MluVNJaqPVseObD/Ywall3SuCl4LG9/bOcZKj5w2JF8=";

        /// <summary>
        /// Select '(The Lord of the Rings: The Fellowship of the Ring\, 12)' in 'MovieListBox' list box
        /// </summary>
        public string UIMovieListBoxListSelectedItemsAsString = "(The Lord of the Rings: The Fellowship of the Ring\\, 12)";

        /// <summary>
        /// Select '(SD\, 32)' in 'EditionListBox' list box
        /// </summary>
        public string UIEditionListBoxListSelectedItemsAsString = "(SD\\, 32)";
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRentItWindow : WpfWindow
    {

        public UIRentItWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "RentIt";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public UIRentItTitleBar UIRentItTitleBar
        {
            get
            {
                if ((this.mUIRentItTitleBar == null))
                {
                    this.mUIRentItTitleBar = new UIRentItTitleBar(this);
                }
                return this.mUIRentItTitleBar;
            }
        }

        public WpfEdit UITextBoxUsernameEdit
        {
            get
            {
                if ((this.mUITextBoxUsernameEdit == null))
                {
                    this.mUITextBoxUsernameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxUsernameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxUsername";
                    this.mUITextBoxUsernameEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxUsernameEdit;
            }
        }

        public WpfEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "passwordBox";
                    this.mUIPasswordBoxEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIPasswordBoxEdit;
            }
        }

        public WpfButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUILoginButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }

        public WpfButton UIViewprofileButton
        {
            get
            {
                if ((this.mUIViewprofileButton == null))
                {
                    this.mUIViewprofileButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewprofileButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button2";
                    this.mUIViewprofileButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIViewprofileButton;
            }
        }

        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "logout";
                    this.mUILogoutButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }

        public WpfButton UIListmoviesButton
        {
            get
            {
                if ((this.mUIListmoviesButton == null))
                {
                    this.mUIListmoviesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIListmoviesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUIListmoviesButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIListmoviesButton;
            }
        }

        public WpfComboBox UISortModeComboBoxComboBox
        {
            get
            {
                if ((this.mUISortModeComboBoxComboBox == null))
                {
                    this.mUISortModeComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISortModeComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "sortModeComboBox";
                    this.mUISortModeComboBoxComboBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortModeComboBoxComboBox;
            }
        }

        public WpfComboBox UIGenreComboBoxComboBox
        {
            get
            {
                if ((this.mUIGenreComboBoxComboBox == null))
                {
                    this.mUIGenreComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIGenreComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "genreComboBox";
                    this.mUIGenreComboBoxComboBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIGenreComboBoxComboBox;
            }
        }

        public WpfButton UISortmoviesButton
        {
            get
            {
                if ((this.mUISortmoviesButton == null))
                {
                    this.mUISortmoviesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISortmoviesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "sortButton";
                    this.mUISortmoviesButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortmoviesButton;
            }
        }

        public WpfList UIMovieListBoxList
        {
            get
            {
                if ((this.mUIMovieListBoxList == null))
                {
                    this.mUIMovieListBoxList = new WpfList(this);
                    #region Search Criteria
                    this.mUIMovieListBoxList.SearchProperties[WpfList.PropertyNames.AutomationId] = "MovieListBox";
                    this.mUIMovieListBoxList.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIMovieListBoxList;
            }
        }

        public WpfButton UIViewMovieButton
        {
            get
            {
                if ((this.mUIViewMovieButton == null))
                {
                    this.mUIViewMovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewMovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "View";
                    this.mUIViewMovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIViewMovieButton;
            }
        }

        public WpfEdit UITextBoxSearchEdit
        {
            get
            {
                if ((this.mUITextBoxSearchEdit == null))
                {
                    this.mUITextBoxSearchEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxSearchEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxSearch";
                    this.mUITextBoxSearchEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxSearchEdit;
            }
        }

        public WpfButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "search";
                    this.mUISearchButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }

        public WpfComboBox UISortModeComboBoxComboBox1
        {
            get
            {
                if ((this.mUISortModeComboBoxComboBox1 == null))
                {
                    this.mUISortModeComboBoxComboBox1 = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISortModeComboBoxComboBox1.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "sortModeComboBox";
                    this.mUISortModeComboBoxComboBox1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortModeComboBoxComboBox1;
            }
        }

        public WpfComboBox UIGenreComboBoxComboBox1
        {
            get
            {
                if ((this.mUIGenreComboBoxComboBox1 == null))
                {
                    this.mUIGenreComboBoxComboBox1 = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIGenreComboBoxComboBox1.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "genreComboBox";
                    this.mUIGenreComboBoxComboBox1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIGenreComboBoxComboBox1;
            }
        }

        public WpfButton UISortmoviesButton1
        {
            get
            {
                if ((this.mUISortmoviesButton1 == null))
                {
                    this.mUISortmoviesButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUISortmoviesButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "sortButton";
                    this.mUISortmoviesButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortmoviesButton1;
            }
        }

        public WpfList UIMovieListBoxList1
        {
            get
            {
                if ((this.mUIMovieListBoxList1 == null))
                {
                    this.mUIMovieListBoxList1 = new WpfList(this);
                    #region Search Criteria
                    this.mUIMovieListBoxList1.SearchProperties[WpfList.PropertyNames.AutomationId] = "MovieListBox";
                    this.mUIMovieListBoxList1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIMovieListBoxList1;
            }
        }

        public WpfButton UIViewMovieButton1
        {
            get
            {
                if ((this.mUIViewMovieButton1 == null))
                {
                    this.mUIViewMovieButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewMovieButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "View";
                    this.mUIViewMovieButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIViewMovieButton1;
            }
        }

        public WpfButton UIListmoviesButton1
        {
            get
            {
                if ((this.mUIListmoviesButton1 == null))
                {
                    this.mUIListmoviesButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIListmoviesButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUIListmoviesButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIListmoviesButton1;
            }
        }

        public WpfComboBox UISortModeComboBoxComboBox3
        {
            get
            {
                if ((this.mUISortModeComboBoxComboBox3 == null))
                {
                    this.mUISortModeComboBoxComboBox3 = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISortModeComboBoxComboBox3.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "sortModeComboBox";
                    this.mUISortModeComboBoxComboBox3.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortModeComboBoxComboBox3;
            }
        }

        public WpfComboBox UIGenreComboBoxComboBox3
        {
            get
            {
                if ((this.mUIGenreComboBoxComboBox3 == null))
                {
                    this.mUIGenreComboBoxComboBox3 = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIGenreComboBoxComboBox3.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "genreComboBox";
                    this.mUIGenreComboBoxComboBox3.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIGenreComboBoxComboBox3;
            }
        }

        public WpfButton UISortmoviesButton3
        {
            get
            {
                if ((this.mUISortmoviesButton3 == null))
                {
                    this.mUISortmoviesButton3 = new WpfButton(this);
                    #region Search Criteria
                    this.mUISortmoviesButton3.SearchProperties[WpfButton.PropertyNames.AutomationId] = "sortButton";
                    this.mUISortmoviesButton3.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISortmoviesButton3;
            }
        }

        public WpfList UIMovieListBoxList2
        {
            get
            {
                if ((this.mUIMovieListBoxList2 == null))
                {
                    this.mUIMovieListBoxList2 = new WpfList(this);
                    #region Search Criteria
                    this.mUIMovieListBoxList2.SearchProperties[WpfList.PropertyNames.AutomationId] = "MovieListBox";
                    this.mUIMovieListBoxList2.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIMovieListBoxList2;
            }
        }

        public WpfButton UIViewMovieButton2
        {
            get
            {
                if ((this.mUIViewMovieButton2 == null))
                {
                    this.mUIViewMovieButton2 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIViewMovieButton2.SearchProperties[WpfButton.PropertyNames.AutomationId] = "View";
                    this.mUIViewMovieButton2.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIViewMovieButton2;
            }
        }

        public WpfList UIEditionListBoxList
        {
            get
            {
                if ((this.mUIEditionListBoxList == null))
                {
                    this.mUIEditionListBoxList = new WpfList(this);
                    #region Search Criteria
                    this.mUIEditionListBoxList.SearchProperties[WpfList.PropertyNames.AutomationId] = "EditionListBox";
                    this.mUIEditionListBoxList.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIEditionListBoxList;
            }
        }

        public WpfButton UISelecteditionButton
        {
            get
            {
                if ((this.mUISelecteditionButton == null))
                {
                    this.mUISelecteditionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISelecteditionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "selectEdition";
                    this.mUISelecteditionButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISelecteditionButton;
            }
        }

        public WpfButton UIRentmovieButton
        {
            get
            {
                if ((this.mUIRentmovieButton == null))
                {
                    this.mUIRentmovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRentmovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "rentmovie";
                    this.mUIRentmovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIRentmovieButton;
            }
        }

        public WpfButton UIYourrentalsButton
        {
            get
            {
                if ((this.mUIYourrentalsButton == null))
                {
                    this.mUIYourrentalsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYourrentalsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "YourRentalsButton";
                    this.mUIYourrentalsButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIYourrentalsButton;
            }
        }

        public WpfButton UILogoutButton1
        {
            get
            {
                if ((this.mUILogoutButton1 == null))
                {
                    this.mUILogoutButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "logoutButton";
                    this.mUILogoutButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUILogoutButton1;
            }
        }

        public WpfButton UIRegisterMovieButton
        {
            get
            {
                if ((this.mUIRegisterMovieButton == null))
                {
                    this.mUIRegisterMovieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRegisterMovieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "registerMovieButton";
                    this.mUIRegisterMovieButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIRegisterMovieButton;
            }
        }

        public WpfEdit UITextBoxTitleEdit
        {
            get
            {
                if ((this.mUITextBoxTitleEdit == null))
                {
                    this.mUITextBoxTitleEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxTitleEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxTitle";
                    this.mUITextBoxTitleEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxTitleEdit;
            }
        }

        public WpfDatePicker UIDatePickerReleaseDatDatePicker
        {
            get
            {
                if ((this.mUIDatePickerReleaseDatDatePicker == null))
                {
                    this.mUIDatePickerReleaseDatDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIDatePickerReleaseDatDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "DatePickerReleaseDate";
                    this.mUIDatePickerReleaseDatDatePicker.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIDatePickerReleaseDatDatePicker;
            }
        }

        public WpfEdit UITextBoxDescriptionEdit
        {
            get
            {
                if ((this.mUITextBoxDescriptionEdit == null))
                {
                    this.mUITextBoxDescriptionEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxDescriptionEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxDescription";
                    this.mUITextBoxDescriptionEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxDescriptionEdit;
            }
        }

        public UIGenreCheckListTable UIGenreCheckListTable
        {
            get
            {
                if ((this.mUIGenreCheckListTable == null))
                {
                    this.mUIGenreCheckListTable = new UIGenreCheckListTable(this);
                }
                return this.mUIGenreCheckListTable;
            }
        }

        public WpfButton UIRegistermovieButton1
        {
            get
            {
                if ((this.mUIRegistermovieButton1 == null))
                {
                    this.mUIRegistermovieButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRegistermovieButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "registermovie";
                    this.mUIRegistermovieButton1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIRegistermovieButton1;
            }
        }

        public WpfButton UISignupButton
        {
            get
            {
                if ((this.mUISignupButton == null))
                {
                    this.mUISignupButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISignupButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Signup";
                    this.mUISignupButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISignupButton;
            }
        }

        public WpfEdit UITextBoxFullNameEdit
        {
            get
            {
                if ((this.mUITextBoxFullNameEdit == null))
                {
                    this.mUITextBoxFullNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxFullNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxFullName";
                    this.mUITextBoxFullNameEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxFullNameEdit;
            }
        }

        public WpfEdit UITextBoxEmailEdit
        {
            get
            {
                if ((this.mUITextBoxEmailEdit == null))
                {
                    this.mUITextBoxEmailEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxEmailEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxEmail";
                    this.mUITextBoxEmailEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxEmailEdit;
            }
        }

        public WpfEdit UIPasswordBox1Edit
        {
            get
            {
                if ((this.mUIPasswordBox1Edit == null))
                {
                    this.mUIPasswordBox1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordBox1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "passwordBox1";
                    this.mUIPasswordBox1Edit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIPasswordBox1Edit;
            }
        }

        public WpfEdit UIPasswordBoxConfirmEdit
        {
            get
            {
                if ((this.mUIPasswordBoxConfirmEdit == null))
                {
                    this.mUIPasswordBoxConfirmEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordBoxConfirmEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "passwordBoxConfirm";
                    this.mUIPasswordBoxConfirmEdit.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIPasswordBoxConfirmEdit;
            }
        }

        public WpfButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Submit";
                    this.mUISubmitButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }

        public WpfEdit UITextBoxUsernameEdit1
        {
            get
            {
                if ((this.mUITextBoxUsernameEdit1 == null))
                {
                    this.mUITextBoxUsernameEdit1 = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxUsernameEdit1.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBoxUsername";
                    this.mUITextBoxUsernameEdit1.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUITextBoxUsernameEdit1;
            }
        }

        public WpfButton UIEditinformationButton
        {
            get
            {
                if ((this.mUIEditinformationButton == null))
                {
                    this.mUIEditinformationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEditinformationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button4";
                    this.mUIEditinformationButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIEditinformationButton;
            }
        }

        public WpfButton UISavechangesButton
        {
            get
            {
                if ((this.mUISavechangesButton == null))
                {
                    this.mUISavechangesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISavechangesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button4";
                    this.mUISavechangesButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUISavechangesButton;
            }
        }
        #endregion

        #region Fields
        private UIRentItTitleBar mUIRentItTitleBar;

        private WpfEdit mUITextBoxUsernameEdit;

        private WpfEdit mUIPasswordBoxEdit;

        private WpfButton mUILoginButton;

        private WpfButton mUIViewprofileButton;

        private WpfButton mUILogoutButton;

        private WpfButton mUIListmoviesButton;

        private WpfComboBox mUISortModeComboBoxComboBox;

        private WpfComboBox mUIGenreComboBoxComboBox;

        private WpfButton mUISortmoviesButton;

        private WpfList mUIMovieListBoxList;

        private WpfButton mUIViewMovieButton;

        private WpfEdit mUITextBoxSearchEdit;

        private WpfButton mUISearchButton;

        private WpfComboBox mUISortModeComboBoxComboBox1;

        private WpfComboBox mUIGenreComboBoxComboBox1;

        private WpfButton mUISortmoviesButton1;

        private WpfList mUIMovieListBoxList1;

        private WpfButton mUIViewMovieButton1;

        private WpfButton mUIListmoviesButton1;

        private WpfComboBox mUISortModeComboBoxComboBox3;

        private WpfComboBox mUIGenreComboBoxComboBox3;

        private WpfButton mUISortmoviesButton3;

        private WpfList mUIMovieListBoxList2;

        private WpfButton mUIViewMovieButton2;

        private WpfList mUIEditionListBoxList;

        private WpfButton mUISelecteditionButton;

        private WpfButton mUIRentmovieButton;

        private WpfButton mUIYourrentalsButton;

        private WpfButton mUILogoutButton1;

        private WpfButton mUIRegisterMovieButton;

        private WpfEdit mUITextBoxTitleEdit;

        private WpfDatePicker mUIDatePickerReleaseDatDatePicker;

        private WpfEdit mUITextBoxDescriptionEdit;

        private UIGenreCheckListTable mUIGenreCheckListTable;

        private WpfButton mUIRegistermovieButton1;

        private WpfButton mUISignupButton;

        private WpfEdit mUITextBoxFullNameEdit;

        private WpfEdit mUITextBoxEmailEdit;

        private WpfEdit mUIPasswordBox1Edit;

        private WpfEdit mUIPasswordBoxConfirmEdit;

        private WpfButton mUISubmitButton;

        private WpfEdit mUITextBoxUsernameEdit1;

        private WpfButton mUIEditinformationButton;

        private WpfButton mUISavechangesButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRentItTitleBar : WpfTitleBar
    {

        public UIRentItTitleBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion

        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGenreCheckListTable : WpfTable
    {

        public UIGenreCheckListTable(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "GenreCheckList";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public UIItemDataItem UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem(this);
                }
                return this.mUIItemDataItem;
            }
        }

        public UIItemDataItem1 UIItemDataItem1
        {
            get
            {
                if ((this.mUIItemDataItem1 == null))
                {
                    this.mUIItemDataItem1 = new UIItemDataItem1(this);
                }
                return this.mUIItemDataItem1;
            }
        }

        public UIItemDataItem2 UIItemDataItem2
        {
            get
            {
                if ((this.mUIItemDataItem2 == null))
                {
                    this.mUIItemDataItem2 = new UIItemDataItem2(this);
                }
                return this.mUIItemDataItem2;
            }
        }
        #endregion

        #region Fields
        private UIItemDataItem mUIItemDataItem;

        private UIItemDataItem1 mUIItemDataItem1;

        private UIItemDataItem2 mUIItemDataItem2;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemDataItem : WpfControl
    {

        public UIItemDataItem(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIItemCheckBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion

        #region Fields
        private WpfCheckBox mUIItemCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemDataItem1 : WpfControl
    {

        public UIItemDataItem1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties["Instance"] = "2";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIItemCheckBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion

        #region Fields
        private WpfCheckBox mUIItemCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemDataItem2 : WpfControl
    {

        public UIItemDataItem2(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties["Instance"] = "3";
            this.WindowTitles.Add("RentIt");
            #endregion
        }

        #region Properties
        public WpfCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIItemCheckBox.WindowTitles.Add("RentIt");
                    #endregion
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion

        #region Fields
        private WpfCheckBox mUIItemCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseapplicationWindow : WinWindow
    {

        public UICloseapplicationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close application?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close application?");
            #endregion
        }

        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }

        public WinTitleBar UICloseapplicationTitleBar
        {
            get
            {
                if ((this.mUICloseapplicationTitleBar == null))
                {
                    this.mUICloseapplicationTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICloseapplicationTitleBar.WindowTitles.Add("Close application?");
                    #endregion
                }
                return this.mUICloseapplicationTitleBar;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow mUIYesWindow;

        private WinTitleBar mUICloseapplicationTitleBar;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {

        public UIYesWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close application?");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close application?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }

        public WinButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[WinButton.PropertyNames.Name] = "Ja";
                    this.mUIJAButton.WindowTitles.Add("Close application?");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;

        private WinButton mUIJAButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangewindowWindow : WinWindow
    {

        public UIChangewindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Change window?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Change window?");
            #endregion
        }

        #region Properties
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow1 : WinWindow
    {

        public UIYesWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Change window?");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Change window?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRentItWindow1 : WinWindow
    {

        public UIRentItWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "RentIt";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("RentIt");
            #endregion
        }
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIUploadeditionWindow : WinWindow
    {

        public UIUploadeditionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Upload edition?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Upload edition?");
            #endregion
        }

        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion

        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {

        public UINOWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Upload edition?");
            #endregion
        }

        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Upload edition?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUINOButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {

        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }

        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveChangesWindow : WinWindow
    {

        public UISaveChangesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Changes?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Changes?");
            #endregion
        }

        #region Properties
        public UIYesWindow2 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow2(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow2 mUIYesWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow2 : WinWindow
    {

        public UIYesWindow2(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Save Changes?");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Save Changes?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
